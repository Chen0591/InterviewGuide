(window.webpackJsonp=window.webpackJsonp||[]).push([[378],{793:function(t,e,n){"use strict";n.r(e);var s=n(62),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",{attrs:{id:"合并两个有序链表"}}),t._v(" "),n("h3",{attrs:{id:"_21-合并两个有序链表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_21-合并两个有序链表"}},[t._v("#")]),t._v(" 21. 合并两个有序链表")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。")]),t._v(" "),n("p",[n("strong",[t._v("示例：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：1->2->4, 1->3->4\n输出：1->1->2->3->4->4\n")])])]),n("h4",{attrs:{id:"第一版-熟悉一下怎么写的再说"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-熟悉一下怎么写的再说"}},[t._v("#")]),t._v(" 第一版，熟悉一下怎么写的再说")]),t._v(" "),n("p",[t._v("执行用时 :12 ms, 在所有 cpp 提交中击败了77.75%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :9 MB, 在所有 cpp 提交中击败了76.64%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("struct ListNode {\n\n\tint val;\n\tListNode* next;\n\tListNode(int x) :val(x), next(nullptr) {}\n};\n\nListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n\tif (l1 == nullptr) return l2;\n\tif (l2 == nullptr)  return l1;\n\n\tListNode* res=nullptr;\n\n\tif (l1->val <= l2->val) {\n\n\t\tres = l1;\n\t\tl1 = l1->next;\n\n\t}\n\telse {\n\n\t\tres = l2;\n\t\tl2 = l2->next;\n\t}\n\n\tListNode* head = res;\n\n\twhile (l1 && l2) {\n\t\tif (l1->val <= l2->val) {\n\n\t\t\tres->next = l1;\t\t\n\t\t\tl1 = l1->next;\n\t\t\tres = res->next;\n\n\t\t} else {\n\t\t\tres->next = l2;\n\t\t\tl2 = l2->next;\n\t\t\tres = res->next;\n\t\t}\n\n\t}\n\n\tres->next = l1 == nullptr ? l2 : l1;\n\treturn head;\n}\n")])])]),n("p",{attrs:{id:"反转链表"}}),t._v(" "),n("h3",{attrs:{id:"_206-反转链表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_206-反转链表"}},[t._v("#")]),t._v(" 206. 反转链表")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("反转一个单链表。")]),t._v(" "),n("p",[n("strong",[t._v("示例:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL\n")])])]),n("p",[n("strong",[t._v("进阶:")]),t._v("\n你可以迭代或递归地反转链表。你能否用两种方法解决这道题？")]),t._v(" "),n("h4",{attrs:{id:"第一版-反转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-反转"}},[t._v("#")]),t._v(" 第一版，反转")]),t._v(" "),n("p",[t._v("执行用时 :12 ms, 在所有 cpp 提交中击败了78.92%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :9.2 MB, 在所有 cpp 提交中击败了20.28%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("struct ListNode {\n\n\tint val;\n\tListNode* next;\n\tListNode(int x) :val(x), next(nullptr) {}\n};\n\nListNode* reverseList(ListNode* head) {\n\n\tListNode* pre = nullptr;\n\tListNode* curr = head;\n\tListNode* next = nullptr;\n\twhile (curr) {\n\t\tnext = curr->next;\n\t\tcurr->next = pre;\n\t\tpre = curr;\n\t\tcurr = next;\n\t}\n\n\treturn pre;\n\n}\n")])])]),n("p",{attrs:{id:"删除链表中的节点"}}),t._v(" "),n("h3",{attrs:{id:"_237-删除链表中的节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_237-删除链表中的节点"}},[t._v("#")]),t._v(" 237. 删除链表中的节点")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/delete-node-in-a-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。")]),t._v(" "),n("p",[t._v("现有一个链表 -- head = [4,5,1,9]，它可以表示为:")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/237_example.png",alt:"img"}})]),t._v(" "),n("p",[n("strong",[t._v("示例 1:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: head = [4,5,1,9], node = 5\n输出: [4,1,9]\n解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -> 1 -> 9.\n")])])]),n("p",[n("strong",[t._v("示例 2:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: head = [4,5,1,9], node = 1\n输出: [4,5,9]\n解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -> 5 -> 9.\n")])])]),n("p",[n("strong",[t._v("说明:")])]),t._v(" "),n("ul",[n("li",[t._v("链表至少包含两个节点。")]),t._v(" "),n("li",[t._v("链表中所有节点的值都是唯一的。")]),t._v(" "),n("li",[t._v("给定的节点为非末尾节点并且一定是链表中的一个有效节点。")]),t._v(" "),n("li",[t._v("不要从你的函数中返回任何结果。")]),t._v(" "),n("li")]),t._v(" "),n("h4",{attrs:{id:"第一版-替身攻击那种"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-替身攻击那种"}},[t._v("#")]),t._v(" 第一版，替身攻击那种")]),t._v(" "),n("p",[t._v("执行用时 :12 ms, 在所有 cpp 提交中击败了98.53%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :9.2 MB, 在所有 cpp 提交中击败了47.23%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    void deleteNode(ListNode* node) {\n         node->val = node->next->val;\n        node->next = node->next->next;\n        \n    }\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);