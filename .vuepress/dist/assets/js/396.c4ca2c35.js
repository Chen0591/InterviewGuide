(window.webpackJsonp=window.webpackJsonp||[]).push([[396],{815:function(t,n,s){"use strict";s.r(n);var e=s(62),a=Object(e.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",{attrs:{id:"无重复字符的最长子串"}}),t._v(" "),s("h3",{attrs:{id:"_3-无重复字符的最长子串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-无重复字符的最长子串"}},[t._v("#")]),t._v(" 3. 无重复字符的最长子串")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("给定一个字符串，请你找出其中不含有重复字符的 "),s("strong",[t._v("最长子串")]),t._v(" 的长度。")]),t._v(" "),s("p",[s("strong",[t._v("示例 1:")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('输入: "abcabcbb"\n输出: 3 \n解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。\n')])])]),s("p",[s("strong",[t._v("示例 2:")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('输入: "bbbbb"\n输出: 1\n解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。\n')])])]),s("p",[s("strong",[t._v("示例 3:")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('输入: "pwwkew"\n输出: 3\n解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。\n')])])]),s("h4",{attrs:{id:"第一版-没做出来"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一版-没做出来"}},[t._v("#")]),t._v(" 第一版，没做出来")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("int lengthOfLongestSubstring(string s) {\n\n\tif (s.size() <= 1) return s.size();\n\tunordered_set<char>  res;\n\tint maxLen = 1,low = 0,len=s.size();\n\tres.insert(s[0]);\n\tfor (int i = 1; i < len; ++i) {\n\t\tif (res.find(s[i])!=res.end()) {\n\t\t\tres.insert(s[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor (int j = low; j < i; ++j) {\n\t\t\t\tif (s[j] == s[i]) {\n\t\t\t\t\tmaxLen = max(maxLen, i - j);\n\t\t\t\t\tlow = j + 1;\n\t\t\t\t\t//cout << low << endl;\n\t\t\t\t\tres.insert(s[low]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tres.erase(s[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\treturn maxLen;\n}\n")])])]),s("h4",{attrs:{id:"第二版-改动了一下-其实想岔了-没有想象中的那么难"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二版-改动了一下-其实想岔了-没有想象中的那么难"}},[t._v("#")]),t._v(" 第二版，改动了一下，其实想岔了,没有想象中的那么难")]),t._v(" "),s("p",[t._v("执行用时 :20 ms, 在所有 cpp 提交中击败了61.23%的用户")]),t._v(" "),s("p",[t._v("内存消耗 :11.4 MB, 在所有 cpp 提交中击败了76.90%的用户")]),t._v(" "),s("div",{staticClass:"language-C++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("int lengthOfLongestSubstring(string s) {\n\tif (s.size() <= 1) return s.size();\n\tunordered_set<char>  res;\n\tint maxLen = 1,low = 0,len=s.size();\n\tres.insert(s[0]);\n\tfor (int i = 1; i < len; ++i) {\n\t\tif (res.find(s[i])==res.end()) {\n\t\t\tres.insert(s[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor (int j = low; j < i; ++j) {\n\t\t\t\tif (s[j] == s[i]) {\n\t\t\t\t\tmaxLen = max(maxLen, i - low);\n\t\t\t\t\tlow = j + 1;\n\t\t\t\t\t//cout << low << endl;\n\t\t\t\t\tres.insert(s[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tres.erase(s[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tmaxLen = max(maxLen, static_cast<int>(res.size()));\n\treturn maxLen;\n\n}\n")])])]),s("h4",{attrs:{id:"第三版-第三种方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三版-第三种方法"}},[t._v("#")]),t._v(" 第三版，第三种方法")]),t._v(" "),s("p",[t._v("执行用时 :36 ms, 在所有 cpp 提交中击败了36.36%的用户")]),t._v(" "),s("p",[t._v("内存消耗 :13.2 MB, 在所有 cpp 提交中击败了76.11%的用户")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("int lengthOfLongestSubstring(string s) {\n\tif (s.size() <= 1) return s.size();\n\tunordered_set<char> res;\n\tres.insert(s[0]);\n\tint maxLen = 0, left = 0,len=s.size();\n\tfor (int i = 1; i < len; ++i) {\n\t\twhile (res.find(s[i]) != res.end()) {\n\t\t\tres.erase(s[left]);\n\t\t\tleft++;\n\t\t}\n\t\tmaxLen = max(maxLen, i - left + 1);\n\t\tres.insert(s[i]);\n\t}\n\treturn maxLen;\n}\n")])])]),s("p",{attrs:{id:"数组中的第个最大元素"}}),t._v(" "),s("h3",{attrs:{id:"_215-数组中的第k个最大元素-经典"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_215-数组中的第k个最大元素-经典"}},[t._v("#")]),t._v(" 215. 数组中的第K个最大元素  经典")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/kth-largest-element-in-an-array/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("在未排序的数组中找到第 "),s("strong",[t._v("k")]),t._v(" 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。")]),t._v(" "),s("p",[s("strong",[t._v("示例 1:")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入: [3,2,1,5,6,4] 和 k = 2\n输出: 5\n")])])]),s("p",[s("strong",[t._v("示例 2:")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入: [3,2,3,1,2,4,5,5,6] 和 k = 4\n输出: 4\n")])])]),s("p",[s("strong",[t._v("说明:")])]),t._v(" "),s("p",[t._v("你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。")]),t._v(" "),s("h4",{attrs:{id:"第一版-优先队列-小顶堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一版-优先队列-小顶堆"}},[t._v("#")]),t._v(" 第一版 优先队列，小顶堆")]),t._v(" "),s("p",[t._v("执行用时 :12 ms, 在所有 cpp 提交中击败了89.16%的用户")]),t._v(" "),s("p",[t._v("内存消耗 :9.3 MB, 在所有 cpp 提交中击败了67.49%的用户")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("int findKthLargest(vector<int>& nums, int k) {\n\tpriority_queue<int, vector<int>, greater<int>> res;\n\tfor (auto& a : nums) {\n\n\t\tres.push(a);\n\t\tif (res.size() > k)\n\t\t\tres.pop();\n\t}\n\treturn res.top();\n}\n")])])]),s("p",{attrs:{id:"前可个高频元素"}}),t._v(" "),s("h3",{attrs:{id:"_347-前-k-个高频元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_347-前-k-个高频元素"}},[t._v("#")]),t._v(" 347. 前 K 个高频元素")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/top-k-frequent-elements/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("给定一个非空的整数数组，返回其中出现频率前 "),s("strong",[t._v("k")]),t._v(" 高的元素。")]),t._v(" "),s("p",[s("strong",[t._v("示例 1:")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入: nums = [1,1,1,2,2,3], k = 2\n输出: [1,2]\n")])])]),s("p",[s("strong",[t._v("示例 2:")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入: nums = [1], k = 1\n输出: [1]\n")])])]),s("p",[s("strong",[t._v("说明：")])]),t._v(" "),s("ul",[s("li",[t._v("你可以假设给定的 "),s("em",[t._v("k")]),t._v(" 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。")]),t._v(" "),s("li",[t._v("你的算法的时间复杂度"),s("strong",[t._v("必须")]),t._v("优于 O("),s("em",[t._v("n")]),t._v(" log "),s("em",[t._v("n")]),t._v(") , "),s("em",[t._v("n")]),t._v(" 是数组的大小。")]),t._v(" "),s("li")]),t._v(" "),s("h4",{attrs:{id:"第一版-普通方法-速度较快"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一版-普通方法-速度较快"}},[t._v("#")]),t._v(" 第一版，普通方法，速度较快")]),t._v(" "),s("p",[t._v("执行用时 :16 ms, 在所有 cpp 提交中击败了99.62%的用户")]),t._v(" "),s("p",[t._v("内存消耗 :11.9 MB, 在所有 cpp 提交中击败了10.71%的用户")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("bool static  compare(const pair<int, int>& a, const pair<int, int>& b) {\n\treturn a.second > b.second;\n}\n\nvector<int> topKFrequent(vector<int>& nums, int k) {\n\t\n\tunordered_map<int, int> result(nums.size());//值，次数\n\tfor (auto& a : nums) {\n\t\tresult[a]++;\n\t}\n\tvector<pair<int, int>> resultTemp(result.begin(), result.end());\n\tsort(resultTemp.begin(), resultTemp.end(), compare);\n\n\tvector<int> res;\n\tres.reserve(k);\n\tauto beg = resultTemp.begin();\n\twhile (k--) {\n\n\t\tres.push_back(beg->first);\n\t\tbeg++;\n\t}\n\n\treturn res;\n\t\n}\n")])])]),s("h4",{attrs:{id:"第二版-用优先队列-第一次学到这个说法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二版-用优先队列-第一次学到这个说法"}},[t._v("#")]),t._v(" 第二版，用优先队列，第一次学到这个说法")]),t._v(" "),s("p",[t._v("执行用时 :24 ms, 在所有 cpp 提交中击败了83.01%的用户")]),t._v(" "),s("p",[t._v("内存消耗 :11.2 MB, 在所有 cpp 提交中击败了87.09%的用户")]),t._v(" "),s("p",[s("strong",[t._v("求前 k 大，用小根堆，求前 k 小，用大根堆。面试的时候如果说反了会挂！")])]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("struct compare {\n\tbool operator()(const pair<int, int>& a, const pair<int, int>& b) {\n\t\treturn a.second > b.second;\n\t}\n\n};\n\n\nvector<int> topKFrequent(vector<int>& nums, int k) {\n\t\n\tvector<int> ret;\n\tunordered_map<int, int> hash;\n\tfor (auto &a : nums)\n\t{\n\t\thash[a]++;\n\t}\n\tpriority_queue<pair<int, int>, vector<pair<int, int>>, compare> freq;\n\tfor (auto &a : hash)\n\t{\n\t\tfreq.push(a);\n\t\tif (freq.size() > k)\n\t\t\tfreq.pop();\n\t}\n\twhile (!freq.empty())\n\t{\n\t\tret.push_back(freq.top().first);\n\t\tfreq.pop();\n\t}\n\treturn ret;\n}\n")])])]),s("p",{attrs:{id:"常数时间插入"}}),t._v(" "),s("h3",{attrs:{id:"_380-常数时间插入、删除和获取随机元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_380-常数时间插入、删除和获取随机元素"}},[t._v("#")]),t._v(" 380. 常数时间插入、删除和获取随机元素")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/insert-delete-getrandom-o1/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("设计一个支持在"),s("em",[t._v("平均")]),t._v(" 时间复杂度 "),s("strong",[t._v("O(1)")]),t._v(" 下，执行以下操作的数据结构。")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("insert(val)")]),t._v("：当元素 val 不存在时，向集合中插入该项。")]),t._v(" "),s("li",[s("code",[t._v("remove(val)")]),t._v("：元素 val 存在时，从集合中移除该项。")]),t._v(" "),s("li",[s("code",[t._v("getRandom")]),t._v("：随机返回现有集合中的一项。每个元素应该有"),s("strong",[t._v("相同的概率")]),t._v("被返回。")])]),t._v(" "),s("p",[s("strong",[t._v("示例 :")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 初始化一个空的集合。\nRandomizedSet randomSet = new RandomizedSet();\n\n// 向集合中插入 1 。返回 true 表示 1 被成功地插入。\nrandomSet.insert(1);\n\n// 返回 false ，表示集合中不存在 2 。\nrandomSet.remove(2);\n\n// 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。\nrandomSet.insert(2);\n\n// getRandom 应随机返回 1 或 2 。\nrandomSet.getRandom();\n\n// 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。\nrandomSet.remove(1);\n\n// 2 已在集合中，所以返回 false 。\nrandomSet.insert(2);\n\n// 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。\nrandomSet.getRandom();\n")])])]),s("h4",{attrs:{id:"第一版-好差的一个数字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一版-好差的一个数字"}},[t._v("#")]),t._v(" 第一版，好差的一个数字...")]),t._v(" "),s("p",[t._v("执行用时 :284 ms, 在所有 cpp 提交中击败了5.15%的用户")]),t._v(" "),s("p",[t._v("内存消耗 :121.7 MB, 在所有 cpp 提交中击败了5.07%的用户")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class RandomizedSet {\npublic:\n\t/** Initialize your data structure here. */\n\tRandomizedSet() {\n\n\t}\n\n\t/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n\tbool insert(int val) {\n\t\tif (result.find(val) == result.end())\n\t\t{\n\t\t\tresult.insert({ val,val });\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\n\t}\n\n\t/** Removes a value from the set. Returns true if the set contained the specified element. */\n\tbool remove(int val) {\n\n\t\tif (result.erase(val) == 1) return true;\n\t\telse\n\t\t\treturn false;\n\n\t}\n\n\t/** Get a random element from the set. */\n\tint getRandom() {\n\n\t\tvector<int> temp;\n\t\ttemp.reserve(result.size());\n\t\tfor (auto beg = result.begin(); beg != result.end(); ++beg) {\n\t\t\ttemp.push_back(beg->second);\n\t\t}\n\n\t\tint index = rand()%temp.size();\n\n\t\treturn temp[index];\n\t}\n\nprivate:\n\tunordered_map<int, int> result;\n};\n")])])]),s("h4",{attrs:{id:"第二版-别人的做法-很有效"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二版-别人的做法-很有效"}},[t._v("#")]),t._v(" 第二版，别人的做法，很有效")]),t._v(" "),s("p",[t._v("执行用时 :52 ms, 在所有 cpp 提交中击败了99.49%的用户")]),t._v(" "),s("p",[t._v("内存消耗 :22 MB, 在所有 cpp 提交中击败了78.34%的用户")]),t._v(" "),s("p",[t._v("首先，要在O(1)时间内的插入删除，肯定要利用哈希表的。但是问题在于随机返回一个元素，一开始还想着直接随机一个dict.size()范围内的数，然后让一个指向dict头部的迭代器与之相加-----------仔细一想，无序容器的迭代器不支持随机访问。。。但要随机返回某个元素，肯定要用到支持随机访问得迭代器啊！")]),t._v(" "),s("p",[t._v("而显然，支持随机访问的迭代器必须是管理连续内存的容器，常见的有--vector 、deque、C-stying arrary")]),t._v(" "),s("p",[t._v("所以目前需要(1)散列表(2)支持随机访问的迭代器，所以解法是，两者都用。 这里，用vector存储每一个插入的元素，散列表dict存储插入元素的下标。这样问题的关键就不是插入了，而是删除---怎样做到O(1)时间从vector容器内删除元素呢?显然，要从vector容器内删除元素，只能从其尾部删除。所以方法是:先交换vector队尾元素和待删除元素的值(因为dict中存储了下标，所以可以直接得到待删除元素的下标)，然后把队尾元素删除，并更新原队尾元素的下标即可，其他位置的元素下标并没有变化。")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class RandomizedSet {\npublic:\n\t/** Initialize your data structure here. */\n\tRandomizedSet() {\n\n\t}\n\n\t/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n bool insert(int val) {\n        if(dict.count(val) > 0)\n            return false;\n        Numbers.push_back(val);\n        dict[val] = Numbers.size()-1; \n        return true;\n    }\n\n\t/** Removes a value from the set. Returns true if the set contained the specified element. */\n\t bool remove(int val) {\n        if(dict.count(val) == 0)\n            return false;\n        dict[Numbers.back()] = dict[val];               //更新原队尾元素的下标\n        swap(Numbers.back(),Numbers[dict[val]]);        //交换原队尾元素和待删除元素\n        Numbers.pop_back();                            //删除原队尾元素\n        dict.erase(val);                               //删除指定元素的下标\n        return true;\n    }\n    \n    /** Get a random element from the set. */\n    int getRandom() {\n        int pos = Numbers.empty() ? 0 :rand() % Numbers.size();\n        return Numbers[pos];\n    }\nprivate:\n\tunordered_map<int, int> dict;\n    vector<int> Numbers\n};\n")])])]),s("h4",{attrs:{id:"第三版-自己又复现一遍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三版-自己又复现一遍"}},[t._v("#")]),t._v(" 第三版，自己又复现一遍")]),t._v(" "),s("p",[t._v("执行用时 :68 ms, 在所有 cpp 提交中击败了84.10%的用户")]),t._v(" "),s("p",[t._v("内存消耗 :22.3 MB, 在所有 cpp 提交中击败了33.18%的用户")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class RandomizedSet {\npublic:\n\t/** Initialize your data structure here. */\n\tRandomizedSet() {}\n\n\t/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n\tbool insert(int val) {\n\t\tif (dict.find(val) == dict.end())//不在数组中\n\t\t{\n\t\t\tdict[val] = result.size();\n\t\t\tresult.push_back(val);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\n\t}\n\n\t/** Removes a value from the set. Returns true if the set contained the specified element. */\n\tbool remove(int val) {\n\n\t\tif (dict.find(val) != dict.end()) {//在内存中\t\t\n\t\t\tdict[result.back()] = dict[val];\n\t\t\tswap(result.back(),result[dict[val]]);\n\t\t\tdict.erase(val);\n\t\t\tresult.pop_back();\n\t\t\treturn true;\n\t\t}\n\t\t\treturn false;\n\n\n\t}\n\n\t/** Get a random element from the set. */\n\tint getRandom() {\n\n\t\tint index = result.empty() ? 0 : rand() % result.size();\n\t\treturn result[index];\n\t}\n\nprivate:\n\tunordered_map<int, int> dict;\n\tvector<int> result;\n};\n")])])]),s("p",{attrs:{id:"根据字符出现频率排序"}}),t._v(" "),s("h3",{attrs:{id:"_451-根据字符出现频率排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_451-根据字符出现频率排序"}},[t._v("#")]),t._v(" 451. 根据字符出现频率排序")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/sort-characters-by-frequency/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("给定一个字符串，请将字符串里的字符按照出现的频率降序排列。")]),t._v(" "),s("p",[s("strong",[t._v("示例 1:")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入:\n\"tree\"\n\n输出:\n\"eert\"\n\n解释:\n'e'出现两次，'r'和't'都只出现一次。\n因此'e'必须出现在'r'和't'之前。此外，\"eetr\"也是一个有效的答案。\n")])])]),s("p",[s("strong",[t._v("示例 2:")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('输入:\n"cccaaa"\n\n输出:\n"cccaaa"\n\n解释:\n\'c\'和\'a\'都出现三次。此外，"aaaccc"也是有效的答案。\n注意"cacaca"是不正确的，因为相同的字母必须放在一起。\n')])])]),s("p",[s("strong",[t._v("示例 3:")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('输入:\n"Aabb"\n\n输出:\n"bbAa"\n\n解释:\n此外，"bbaA"也是一个有效的答案，但"Aabb"是不正确的。\n注意\'A\'和\'a\'被认为是两种不同的字符。\n')])])]),s("h4",{attrs:{id:"_1、常规做法-借助unordered-map-与-vector"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、常规做法-借助unordered-map-与-vector"}},[t._v("#")]),t._v(" 1、常规做法 借助unordered_map 与 vector")]),t._v(" "),s("p",[t._v("执行用时：36 ms, 在所有 C++ 提交中击败了42.09%的用户")]),t._v(" "),s("p",[t._v("内存消耗：10.9 MB, 在所有 C++ 提交中击败了50.00%的用户")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("string "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("frequencySort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\tunordered_map"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" unmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tunmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tvector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" it "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" unmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" it "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" unmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tvector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" it"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\ttemp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\tresult"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("move")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t\ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"_2、自己优化了一点内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、自己优化了一点内存"}},[t._v("#")]),t._v(" 2、自己优化了一点内存")]),t._v(" "),s("p",[t._v("执行用时：36 ms, 在所有 C++ 提交中击败了42.09%的用户")]),t._v(" "),s("p",[t._v("内存消耗：8.9 MB, 在所有 C++ 提交中击败了100.00%的用户")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("string "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("frequencySort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\tunordered_map"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" unmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tunmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tvector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" it "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" unmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" it "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" unmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tvector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" it"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\ttemp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\tresult"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("move")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里改写，不再使用auto了")]),t._v("\n\n\ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t\ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"_3、一种别的做法-借助unordered-map-和-mutilmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、一种别的做法-借助unordered-map-和-mutilmap"}},[t._v("#")]),t._v(" 3、一种别的做法，借助unordered_map 和 mutilmap")]),t._v(" "),s("p",{attrs:{id:"单词替换"}}),t._v(" "),s("h3",{attrs:{id:"_648-单词替换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_648-单词替换"}},[t._v("#")]),t._v(" 648. 单词替换")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/replace-words/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("在英语中，我们有一个叫做 "),s("code",[t._v("词根")]),t._v("(root)的概念，它可以跟着其他一些词组成另一个较长的单词——我们称这个词为 "),s("code",[t._v("继承词")]),t._v("(successor)。例如，词根"),s("code",[t._v("an")]),t._v("，跟随着单词 "),s("code",[t._v("other")]),t._v("(其他)，可以形成新的单词 "),s("code",[t._v("another")]),t._v("(另一个)。")]),t._v(" "),s("p",[t._v("现在，给定一个由许多词根组成的词典和一个句子。你需要将句子中的所有"),s("code",[t._v("继承词")]),t._v("用"),s("code",[t._v("词根")]),t._v("替换掉。如果"),s("code",[t._v("继承词")]),t._v("有许多可以形成它的"),s("code",[t._v("词根")]),t._v("，则用最短的词根替换它。")]),t._v(" "),s("p",[t._v("你需要输出替换之后的句子。")]),t._v(" "),s("p",[s("strong",[t._v("示例 1:")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('输入: dict(词典) = ["cat", "bat", "rat"]\nsentence(句子) = "the cattle was rattled by the battery"\n输出: "the cat was rat by the bat"\n')])])]),s("p",[s("strong",[t._v("注:")])]),t._v(" "),s("ol",[s("li",[t._v("输入只包含小写字母。")]),t._v(" "),s("li",[t._v("1 <= 字典单词数 <=1000")]),t._v(" "),s("li",[t._v("1 <=  句中词语数 <= 1000")]),t._v(" "),s("li",[t._v("1 <= 词根长度 <= 100")]),t._v(" "),s("li",[t._v("1 <= 句中词语长度 <= 1000")])]),t._v(" "),s("h4",{attrs:{id:"第一版-自己写的-比较慢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一版-自己写的-比较慢"}},[t._v("#")]),t._v(" 第一版，自己写的，比较慢")]),t._v(" "),s("p",[t._v("执行用时 :384 ms, 在所有 cpp 提交中击败了19.37%的用户")]),t._v(" "),s("p",[t._v("内存消耗 :112.3 MB, 在所有 cpp 提交中击败了20.75%的用户")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('bool static compare(const string& a, const string& b) {\n\treturn a.size() < b.size();\n\n}\n\nstring replaceWords(vector<string>& dict, string sentence) {\n\n\tsort(dict.begin(), dict.end(), compare);\n\tstring temp,result;\n\tfor (unsigned i = 0; i < sentence.size(); ++i) {\n\t\ttemp = "";\n\t\twhile (sentence[i] != \' \' && i < sentence.size()) {\n\t\t\ttemp += sentence[i++];\n\t\t}\n\n\t\tfor (auto& d : dict) {\n\t\t\tif (temp.substr(0, d.size()) == d) {\n\t\t\t\ttemp = d;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\t\tresult += temp;\n\t\tresult += " ";\n\n\t}\n\n\treturn result.substr(0, result.size() - 1);\n\n}\n')])])]),s("h4",{attrs:{id:"第二版-改进了一点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二版-改进了一点"}},[t._v("#")]),t._v(" 第二版，改进了一点")]),t._v(" "),s("p",[t._v("执行用时 :108 ms, 在所有 cpp 提交中击败了52.57%的用户")]),t._v(" "),s("p",[t._v("内存消耗 :19.5 MB, 在所有 cpp 提交中击败了92.45%的用户")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("string replaceWords(vector<string>& dict, string sentence) {\n\n\tunordered_set<string> unst(dict.begin(), dict.end());\n\tstring temp,result;\n\tfor (unsigned i = 0; i < sentence.size(); ++i) {\n\t\ttemp = \"\";\n\t\twhile (sentence[i] != ' ' && i < sentence.size()) {\n\t\t\ttemp += sentence[i];\n\t\t\tif (unst.find(temp) != unst.end()) {//此时已经找到了前缀了\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tresult += temp;\n\t\tresult += \" \";\n\t\twhile (sentence[i] != ' ' && i < sentence.size())\n\t\t{\n\t\t\t++i;\n\t\t}//将整个单词跨过去。直到遇到空格\t\n\n\t}\n\n\treturn result.substr(0, result.size() - 1);\n\n}\n")])])]),s("p",{attrs:{id:"前个高频单词"}}),t._v(" "),s("h3",{attrs:{id:"_692-前k个高频单词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_692-前k个高频单词"}},[t._v("#")]),t._v(" 692. 前K个高频单词")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/top-k-frequent-words/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("给一非空的单词列表，返回前 "),s("em",[t._v("k")]),t._v(" 个出现次数最多的单词。")]),t._v(" "),s("p",[t._v("返回的答案应该按单词出现频率由高到低排序。如果不同的单词有相同出现频率，按字母顺序排序。")]),t._v(" "),s("p",[s("strong",[t._v("示例 1：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('输入: ["i", "love", "leetcode", "i", "love", "coding"], k = 2\n输出: ["i", "love"]\n解析: "i" 和 "love" 为出现次数最多的两个单词，均为2次。\n    注意，按字母顺序 "i" 在 "love" 之前。\n')])])]),s("p",[s("strong",[t._v("示例 2：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('输入: ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], k = 4\n输出: ["the", "is", "sunny", "day"]\n解析: "the", "is", "sunny" 和 "day" 是出现次数最多的四个单词，\n    出现次数依次为 4, 3, 2 和 1 次。\n')])])]),s("p",[s("strong",[t._v("注意：")])]),t._v(" "),s("ol",[s("li",[t._v("假定 "),s("em",[t._v("k")]),t._v(" 总为有效值， 1 ≤ "),s("em",[t._v("k")]),t._v(" ≤ 集合元素数。")]),t._v(" "),s("li",[t._v("输入的单词均由小写字母组成。")])]),t._v(" "),s("p",[s("strong",[t._v("扩展练习：")])]),t._v(" "),s("ol",[s("li",[t._v("尝试以 "),s("em",[t._v("O")]),t._v("("),s("em",[t._v("n")]),t._v(" log "),s("em",[t._v("k")]),t._v(") 时间复杂度和 "),s("em",[t._v("O")]),t._v("("),s("em",[t._v("n")]),t._v(") 空间复杂度解决。")])]),t._v(" "),s("h4",{attrs:{id:"第一版-用优先队列解决问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一版-用优先队列解决问题"}},[t._v("#")]),t._v(" 第一版，用优先队列解决问题")]),t._v(" "),s("p",[t._v("执行用时 :20 ms, 在所有 cpp 提交中击败了86.48%的用户")]),t._v(" "),s("p",[t._v("内存消耗 :11.4 MB, 在所有 cpp 提交中击败了86.59%的用户")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("struct compare {\n\tbool operator()(const pair<string, int>& a, const pair<string, int>& b) {\n\t\tif (a.second == b.second)\n\t\t\treturn a < b;\n\t\treturn a.second > b.second;\n\t}\n\n};\n\n\nvector<string> topKFrequent(vector<string>& words, int k) {\n\n\n\tunordered_map<string, int> result(words.size());\n\n\tfor (auto& a : words) {\n\t\tresult[a]++;\n\t}\n\tpriority_queue<pair<string, int>, vector<pair<string, int>>, compare> pri_que;\n\tfor (auto& a : result) {\n\t\tpri_que.push(a);\n\t\tif (pri_que.size() > k)\n\t\t\tpri_que.pop();\n\t}\n\n\tvector<string> res;\n\tres.reserve(k);\n\twhile (!pri_que.empty()) {\n\t\tres.push_back(pri_que.top().first);\n\t\tpri_que.pop();\n\t}\n\n\treverse(res.begin(), res.end()); //注意翻转一下\n\treturn res;\n}\n")])])]),s("h4",{attrs:{id:"第二版-不用优先队列其实更快一点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二版-不用优先队列其实更快一点"}},[t._v("#")]),t._v(" 第二版，不用优先队列其实更快一点")]),t._v(" "),s("p",[t._v("执行用时 :12 ms, 在所有 cpp 提交中击败了99.81%的用户")]),t._v(" "),s("p",[t._v("内存消耗 :11.1 MB, 在所有 cpp 提交中击败了97.56%的用户")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("bool static compare(const pair<string, int>& a, const pair<string, int>& b) {\n\tif (a.second == b.second)\n\t\treturn a < b;\n\treturn a.second > b.second;\n}\n\n\n\nvector<string> topKFrequent(vector<string>& words, int k) {\n\tunordered_map<string, int> result(words.size());\n\n\tfor (auto& a : words) {\n\t\tresult[a]++;\n\t}\n\tvector<pair<string, int>> res;\n\tres.assign(result.begin(), result.end());\n\tsort(res.begin(), res.end(), compare);\n\n\tvector<string> resTemp;\n\tresTemp.reserve(k);\n\tauto beg = res.begin();\n\twhile (k--) {\n\t\tresTemp.push_back(beg->first);\n\t\t++beg;\n\t}\n\n\treturn resTemp;\n}\n")])])]),s("p",{attrs:{id:"最长重复子数组"}}),t._v(" "),s("h3",{attrs:{id:"_718-最长重复子数组-经典"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_718-最长重复子数组-经典"}},[t._v("#")]),t._v(" 718. 最长重复子数组  经典")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-length-of-repeated-subarray/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("组 "),s("code",[t._v("A")]),t._v(" 和 "),s("code",[t._v("B")]),t._v(" ，返回两个数组中公共的、长度最长的子数组的长度。")]),t._v(" "),s("p",[s("strong",[t._v("示例 1:")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入:\nA: [1,2,3,2,1]\nB: [3,2,1,4,7]\n输出: 3\n解释: \n长度最长的公共子数组是 [3, 2, 1]。\n")])])]),s("p",[s("strong",[t._v("说明:")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("1 <= len(A), len(B) <= 1000")])]),t._v(" "),s("li",[s("p",[t._v("0 <= A[i], B[i] < 100")])])]),t._v(" "),s("div",{staticClass:"language-angelscript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("  3 2 1 4 7\n1 0 0 1 0 0\n2 0 1 0 0 0\n3 1 0 0 0 0\n2 0 2 0 0 0\n1 0 0 3 0 0\n\n")])])]),s("p",[t._v("dp[i][j]代表以A[i-1]与B[j-1]结尾的公共字串的长度,公共字串必须以A[i-1]，B[j-1]结束，即当A[i-1] == B[j-1]时，dp[i][j] = dp[i-1][j-1] + 1; 当A[i-1] != B[j-1]时，以A[i-1]和B[j-1]结尾的公共字串长度为0,dp[i][j] = 0。输出最大的公共字串的长度即为最长重复字串。 打个表会更直观一点")]),t._v(" "),s("h4",{attrs:{id:"第一版-最大公共子序列和子数组是不同的-dp解法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一版-最大公共子序列和子数组是不同的-dp解法"}},[t._v("#")]),t._v(" 第一版，最大公共子序列和子数组是不同的，DP解法")]),t._v(" "),s("p",[t._v("执行用时 :260 ms, 在所有 cpp 提交中击败了66.71%的用户")]),t._v(" "),s("p",[t._v("内存消耗 :106.1 MB, 在所有 cpp 提交中击败了58.93%的用户")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("int findLength(vector<int>& A, vector<int>& B) {\n\tint len1 = A.size(), len2 = B.size(),maxNum=0;\n\tvector<vector<int>> dp(len1 , vector<int>(len2 , 0));\n\tfor (int i = 0; i < len1; ++i) {\n\t\tfor (int j = 0; j < len2; ++j) {\n\t\t\tif (i == 0 || j == 0) {\n\t\t\t\tdp[i][j] = A[i] == B[j] ? 1 : 0;\n\t\t\t}\n\t\t\telse\tif (A[i] == B[j])\n\t\t\t{\n\t\t\t\tdp[i][j] = dp[i - 1][j - 1] + 1;\n\t\t\t\tmaxNum = max(maxNum, dp[i][j]);\n\t\t\t}\n\t\t\telse\n\t\t\t\tdp[i][j]=0;\n\n\t\t}\n\t}\n\n\treturn maxNum;\n\n}\n")])])]),s("h4",{attrs:{id:"第二版-这是最大公共子序列的解法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二版-这是最大公共子序列的解法"}},[t._v("#")]),t._v(" 第二版，这是最大公共子序列的解法")]),t._v(" "),s("p",[t._v("3 2 1 4 7\n1 0 0 1 1 1\n2 0 1 1 1 1\n3 1 1 1 1 1\n2 1 2 2 2 2\n1 1 2 3 3 3")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    int findLength(vector<int>& A, vector<int>& B) {\n    int len1 = A.size(), len2 = B.size();\n\tvector<vector<int>> dp(len1 , vector<int>(len2 , 0));\n\n\tfor (int i = 0; i < len1; ++i) {\n\t\tif (A[i] == B[0]) {\n\t\t\twhile (i < len1)\n\t\t\t\tdp[i++][0] = 1;\n\t\t}\n\n\t}\n\n\n\tfor (int j = 0; j < len2; ++j) {\n\t\tif (B[j] == A[0]) {\n\t\t\twhile (j < len2)\n\t\t\t\tdp[0][j++] = 1;\n\t\t}\n\t}\n\n\n\tfor (int i = 1; i < len1; ++i) {\n\t\tfor (int j = 1; j < len2; ++j) {\n\t\t\tif (A[i] == B[j])\n\t\t\t\tdp[i][j] = dp[i - 1][j - 1] + 1;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i-1][j],dp[i][j-1]);\n\n\n\t\t}\n\t}\n\n\treturn dp[len1 - 1][len2 - 1];\n\n    }\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);