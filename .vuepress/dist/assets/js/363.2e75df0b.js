(window.webpackJsonp=window.webpackJsonp||[]).push([[363],{778:function(t,s,n){"use strict";n.r(s);var a=n(62),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",{attrs:{id:"构建乘积数组"}}),t._v(" "),n("h3",{attrs:{id:"剑指-offer-66-构建乘积数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#剑指-offer-66-构建乘积数组"}},[t._v("#")]),t._v(" 剑指 Offer 66. 构建乘积数组")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/gou-jian-cheng-ji-shu-zu-lcof/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("给定一个数组 "),n("code",[t._v("A[0,1,…,n-1]")]),t._v("，请构建一个数组 "),n("code",[t._v("B[0,1,…,n-1]")]),t._v("，其中 "),n("code",[t._v("B")]),t._v(" 中的元素 "),n("code",[t._v("B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]")]),t._v("。不能使用除法。")]),t._v(" "),n("p",[n("strong",[t._v("示例:")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("输入"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n输出"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),n("p",[n("strong",[t._v("提示：")])]),t._v(" "),n("ul",[n("li",[t._v("所有元素乘积之和不会溢出 32 位整数")]),t._v(" "),n("li",[n("code",[t._v("a.length <= 100000")])])]),t._v(" "),n("h4",{attrs:{id:"_1、一种绝妙的作法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、一种绝妙的作法"}},[t._v("#")]),t._v(" 1、一种绝妙的作法")]),t._v(" "),n("p",[t._v("执行用时：36 ms, 在所有 C++ 提交中击败了88.82%的用户")]),t._v(" "),n("p",[t._v("内存消耗：24.5 MB, 在所有 C++ 提交中击败了100.00%的用户")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("    vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructArr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" temp"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("temp"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        temp"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("len"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("temp"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v("temp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h4",{attrs:{id:"_2、暴力解法-会超时"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、暴力解法-会超时"}},[t._v("#")]),t._v(" 2、暴力解法  会超时")]),t._v(" "),n("p",[t._v("舍弃")]),t._v(" "),n("p",{attrs:{id:"第三大的数"}}),t._v(" "),n("h3",{attrs:{id:"_414-第三大的数-很不错的题目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_414-第三大的数-很不错的题目"}},[t._v("#")]),t._v(" 414. 第三大的数  很不错的题目")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/third-maximum-number/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1:")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("输入"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n输出"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n解释"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 第三大的数是 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("\n")])])]),n("p",[n("strong",[t._v("示例 2:")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("输入"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n输出"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n解释"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 第三大的数不存在"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 所以返回最大的数 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),n("p",[n("strong",[t._v("示例 3:")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("输入"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n输出"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n解释"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 注意，要求返回第三大的数，是指第三大且唯一出现的数。\n存在两个值为"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("的数，它们都排第二。\n")])])]),n("h4",{attrs:{id:"第一版-有参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-有参考"}},[t._v("#")]),t._v(" 第一版，有参考")]),t._v(" "),n("p",[t._v("执行用时 :4 ms, 在所有 cpp 提交中击败了99.23%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :9.1 MB, 在所有 cpp 提交中击败了67.43%的用户")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("thirdMax")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v("  firstNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LONG_MIN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("secondNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LONG_MIN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("thirdNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LONG_MIN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("firstNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n\t\t\t\n\t\t\tthirdNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" secondNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tsecondNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" firstNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tfirstNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("firstNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" secondNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n\t\t\tthirdNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" secondNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tsecondNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("secondNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" thirdNum"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n\t\t\tthirdNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("thirdNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" LONG_MIN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" firstNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" thirdNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",{attrs:{id:"最短无序连续子数组"}}),t._v(" "),n("h3",{attrs:{id:"_581-最短无序连续子数组-很经典的题目-very-nice"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_581-最短无序连续子数组-很经典的题目-very-nice"}},[t._v("#")]),t._v(" 581. 最短无序连续子数组  很经典的题目，very nice")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("给定一个整数数组，你需要寻找一个"),n("strong",[t._v("连续的子数组")]),t._v("，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。")]),t._v(" "),n("p",[t._v("你找到的子数组应是"),n("strong",[t._v("最短")]),t._v("的，请输出它的长度。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: [2, 6, 4, 8, 10, 9, 15]\n输出: 5\n解释: 你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。\n")])])]),n("p",[n("strong",[t._v("说明 :")])]),t._v(" "),n("ol",[n("li",[t._v("输入的数组长度范围在 [1, 10,000]。")]),t._v(" "),n("li",[t._v("输入的数组可能包含"),n("strong",[t._v("重复")]),t._v("元素 ，所以"),n("strong",[t._v("升序")]),t._v("的意思是**<=。**")])]),t._v(" "),n("h4",{attrs:{id:"第一版-参考别人的思路"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-参考别人的思路"}},[t._v("#")]),t._v(" 第一版，参考别人的思路")]),t._v(" "),n("p",[t._v("从左到右循环，记录最大值为 max，若 nums[i] < max, 则表明位置 i 需要调整，记录需要调整的最大位置 i 为 low; 同理，从右到左循环，记录最小值为 min, 若 nums[i] > min, 则表明位置 i 需要调整，记录需要调整的最小位置 i 为 high.")]),t._v(" "),n("p",[n("strong",[t._v("其实并不是的，而是从左向右，保存该过程中的最大值，当当前值与MAX进行对比，如果小于的话说明已经到达了无序列表中了，那就记录当前值，一直到有序列表为止，此时后半部分的有序列表中的第一个值，也要比前面的大或等于前面的最大值，记录下的位置值就不会再改动了，从右到左的部分类似")])]),t._v(" "),n("p",[t._v("执行用时 :24 ms, 在所有 cpp 提交中击败了99.68%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :10.5 MB, 在所有  cpp 提交中击败了85.61%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int findUnsortedSubarray(vector<int>& nums) {\n\n\n\tif (nums.size() <= 1) return 0;\n\tint len=nums.size(),low = 0, high = len - 1, maxNum = nums[0], minNum = nums[len - 1];\n\tfor (int i = 1; i < len; i++) {\n\t\tmaxNum = max(maxNum, nums[i]);\n\t\tminNum = min(minNum, nums[len - 1 - i]);\n\t\tif (nums[i] < maxNum) low = i;\n\t\tif (nums[len - 1 - i] > minNum) high = len - 1 - i;\n\t}\n\n\treturn low > high ? low - high + 1 : 0;\n}\n")])])]),n("h4",{attrs:{id:"第二版-获得启发-重新写了一遍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二版-获得启发-重新写了一遍"}},[t._v("#")]),t._v(" 第二版，获得启发，重新写了一遍")]),t._v(" "),n("p",[t._v("执行用时 :44 ms, 在所有 cpp 提交中击败了70.21%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :10.4 MB, 在所有 cpp 提交中击败了94.96%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('if (nums.size() == 1) return 0;\n\n\tint low = 0, high = nums.size() - 1,len=nums.size();\n\tint maxNum = nums[0], minNum = nums[high];\n\t\n\tfor (int i = 1; i < len ; ++i) {\n\n\t\tmaxNum = max(nums[i], maxNum);\n\t\tif (nums[i] < maxNum) {\t\t\n\t\t\tlow = i;\n\t\t\t//cout << low <<endl;\t\t\t\n\t\t}\n}\n\n\tfor (int j = high-1; j >=0 ; --j) {\n\n\t\tminNum = min(nums[j], minNum);\n\t\tif (nums[j] > minNum) {\n\t\t\thigh = j ;\n\t\t\t//cout <<"high "<< high << endl;\n\t\t}\n\t}\n\n\t//cout << low << " " << high << endl;\n\n\tif (low>high)\n\t\treturn low - high + 1;\n\telse\n\t\treturn 0;\n')])])]),n("h4",{attrs:{id:"第三版-将两个循环改为单一循环-加速了一下"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第三版-将两个循环改为单一循环-加速了一下"}},[t._v("#")]),t._v(" 第三版，将两个循环改为单一循环，加速了一下")]),t._v(" "),n("p",[t._v("执行用时 :28 ms, 在所有 cpp 提交中击败了98.19%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :10.3 MB, 在所有 cpp 提交中击败了97.12%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(" int findUnsortedSubarray(vector<int>& nums) {\n\tif (nums.size() == 1) return 0;\n\tint low = 0, high = nums.size() - 1,len=nums.size();\n\tint maxNum = nums[0], minNum = nums[high];\n\t\n\tfor (int i = 1; i < len ; ++i) {\n\n\t\tmaxNum = max(nums[i], maxNum);\n\t\tif (nums[i] < maxNum) {\t\t\n\t\t\tlow = i;\t\t\n\t\t}\n\n\t\tminNum = min(nums[len-1-i], minNum);\n\t\tif (nums[len - 1 - i] > minNum) {\n\t\t\thigh = len - 1 - i;\n\t\t}\n}\n\n\treturn low > high ? low - high + 1 : 0;\n        \n    }\n")])])]),n("p",{attrs:{id:"种花问题"}}),t._v(" "),n("h3",{attrs:{id:"_605-种花问题-也是很不错的题目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_605-种花问题-也是很不错的题目"}},[t._v("#")]),t._v(" 605. 种花问题  也是很不错的题目")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/can-place-flowers/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。")]),t._v(" "),n("p",[t._v("给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数 "),n("strong",[t._v("n")]),t._v(" 。能否在不打破种植规则的情况下种入 "),n("strong",[t._v("n")]),t._v(" 朵花？能则返回True，不能则返回False。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: flowerbed = [1,0,0,0,1], n = 1\n输出: True\n")])])]),n("p",[n("strong",[t._v("示例 2:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: flowerbed = [1,0,0,0,1], n = 2\n输出: False\n")])])]),n("p",[n("strong",[t._v("注意:")])]),t._v(" "),n("ol",[n("li",[t._v("数组内已种好的花不会违反种植规则。")]),t._v(" "),n("li",[t._v("输入的数组长度范围为 [1, 20000]。")]),t._v(" "),n("li",[n("strong",[t._v("n")]),t._v(" 是非负整数，且不会超过输入数组的大小。")])]),t._v(" "),n("h4",{attrs:{id:"第一版-改了好一会-速度较慢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-改了好一会-速度较慢"}},[t._v("#")]),t._v(" 第一版，改了好一会，速度较慢")]),t._v(" "),n("p",[t._v("执行用时 :24 ms, 在所有 cpp 提交中击败了40.79%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :10.4 MB, 在所有 cpp 提交中击败了80.32%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("bool canPlaceFlowers(vector<int>& flowerbed, int n) {\n\n\t\n\tunordered_map<int, int> res;// 0/1,count\n\tres[0] = 0;\n\tres[1] = 0;\n\tsize_t i = 0;\n\n\twhile (i < flowerbed.size() && flowerbed[i] == 0 ) {\n\t\tres[0] ++;\n\t\ti++;\n\t}\n\tif (i == flowerbed.size()) {//全是 0\n\t\treturn (res[0] + 1) / 2>=n;\n\t} \n\n\tint plantFlower =  res[0] / 2;//遇到1了，此时flowerbed[i] = 1\n\tres[1] = 1;\n\tres[0] = 0;\n\ti++;\n\tfor (; i < flowerbed.size();++i ) {\n\t\t\n\t\tres[flowerbed[i]] += 1;\n\n\t\tif (res[1] == 2) {\n\t\t\t//countZero = res[0];\n\t\t\tplantFlower += (res[0] - 1) / 2;\n\t\t\tres[1] = 1;\n\t\t\tres[0] = 0;\n\t\t}\t\n\n\t}\n\tif (res[1] == 2) {\n\t\t//countZero = res[0];\n\t\tplantFlower += (res[0] - 1) / 2;\n\t}\n\telse if (res[1] == 1) {\n\t\t//countZero = res[0];\n\t\tplantFlower += res[0] / 2;\n\t}\n\n\n\treturn plantFlower >= n;\n\n}\n")])])]),n("h4",{attrs:{id:"第二版-别的想法-防御性种花-这思路可以的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二版-别的想法-防御性种花-这思路可以的"}},[t._v("#")]),t._v(" 第二版，别的想法，防御性种花，这思路可以的....")]),t._v(" "),n("p",[t._v("防御式编程思想：在 flowerbed 数组两端各增加一个 0， 这样处理的好处在于不用考虑边界条件，任意位置处只要连续出现三个 0 就可以栽上一棵花。")]),t._v(" "),n("p",[t._v("执行用时 :24 ms, 在所有 cpp 提交中击败了40.79%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :10.2 MB, 在所有 cpp 提交中击败了93.09%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("bool canPlaceFlowers(vector<int>& flowerbed, int n) {\n\n\t\n\tint len = 1, ans = 0;                //认为左边界提供1个0\n\tfor (auto &i : flowerbed) {\n\t\tif (i) {//为1,遇到1了\n\t\t\tans += (len - 1) / 2;        //len个0可以种这么多花\n\t\t\tlen = 0;\n\t\t}\n\t\telse {//为0\n\t\t\t++len;\n\t\t}\n\t}\n\tans += (len) / 2;                      //处理0尾，认为右边界提供一个0\n\treturn ans >= n;\n\n}\n")])])]),n("p",{attrs:{id:"三个数的最大乘积"}}),t._v(" "),n("h3",{attrs:{id:"_628-三个数的最大乘积"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_628-三个数的最大乘积"}},[t._v("#")]),t._v(" 628. 三个数的最大乘积")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-product-of-three-numbers/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1:")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("输入"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n输出"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n")])])]),n("p",[n("strong",[t._v("示例 2:")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("输入"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n输出"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),t._v("\n")])])]),n("p",[n("strong",[t._v("注意:")])]),t._v(" "),n("ol",[n("li",[t._v("给定的整型数组长度范围是[3,104]，数组中所有的元素范围是[-1000, 1000]。")]),t._v(" "),n("li",[t._v("输入的数组中任意三个数的乘积不会超出32位有符号整数的范围。")])]),t._v(" "),n("h4",{attrs:{id:"第一版-自己写的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-自己写的"}},[t._v("#")]),t._v(" 第一版，自己写的")]),t._v(" "),n("p",[t._v("执行用时 :68 ms, 在所有 cpp 提交中击败了75.20%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :10.8 MB, 在所有 cpp 提交中击败了86.46%的用户")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("maximumProduct")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("max "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lastMax "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" secondMin "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("secondMin "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" temp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" secondMin "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tresult "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" max "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" lastMax "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tresult "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" temp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" temp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tresult "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" max "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" lastMax "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),n("p",{attrs:{id:"子数组最大平均数"}}),t._v(" "),n("h3",{attrs:{id:"_643-子数组最大平均数-i"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_643-子数组最大平均数-i"}},[t._v("#")]),t._v(" 643. 子数组最大平均数 I")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-average-subarray-i/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("给定 "),n("code",[t._v("n")]),t._v(" 个整数，找出平均数最大且长度为 "),n("code",[t._v("k")]),t._v(" 的连续子数组，并输出该最大平均数。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: [1,12,-5,-6,50,3], k = 4\n输出: 12.75\n解释: 最大平均数 (12-5-6+50)/4 = 51/4 = 12.75\n")])])]),n("p",[n("strong",[t._v("注意:")])]),t._v(" "),n("ol",[n("li",[t._v("1 <= "),n("code",[t._v("k")]),t._v(" <= "),n("code",[t._v("n")]),t._v(" <= 30,000。")]),t._v(" "),n("li",[t._v("所给数据范围 [-10,000，10,000]。")])]),t._v(" "),n("h4",{attrs:{id:"第一版-常规遍历-超时"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-常规遍历-超时"}},[t._v("#")]),t._v(" 第一版，常规遍历，超时")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("double aver(vector<int>& res,int k) {\n\tdouble sum=0;\n\tfor (auto& a : res) {\n\t\tsum += a;\n\t}\n\treturn sum / k;\n\n}\n\ndouble findMaxAverage(vector<int>& nums, int k) {\n\tvector<int> res;\n\tint i = 0;\n\tfor (int i = 0; i < k; ++i) {\n\t\tres.push_back(nums[i]);\n\t}\n\n\tdouble  average = aver(res,k);\n\tdouble temp = 0.0;\n\tfor ( ; i < nums.size(); ++i) {\n\n\t\tres[i% k] = nums[i];\n\t\ttemp = aver(res, k);\n\t\taverage = temp > average ? temp : average;\n\t}\n\n\treturn average;\n\n}\n")])])]),n("h4",{attrs:{id:"第二版-改进了一下"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二版-改进了一下"}},[t._v("#")]),t._v(" 第二版，改进了一下")]),t._v(" "),n("p",[t._v("执行用时 :156 ms, 在所有 cpp 提交中击败了76.31%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :21.1 MB, 在所有 cpp 提交中击败了5.17%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("double findMaxAverage(vector<int>& nums, int k) {\n\tvector<int> res;\n\tint i = 0;\n\tfor (int i = 0; i < k; ++i) {\n\t\tres.push_back(nums[i]);\n\t}\n\n\tint sum = 0;\n\tfor (auto& a : res) {\n\t\tsum += a;\n\t}\n\tint result = sum;\n\tfor ( ; i < nums.size(); ++i) {\n\n\t\tsum -= res[i % k];\n\t\tres[i% k] = nums[i];\n\t\tsum += nums[i];\n\t\tresult = max(sum,result);\n\t}\n\treturn result*1.0/k;\n\n}\n")])])]),n("h4",{attrs:{id:"第三版-改进一点点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第三版-改进一点点"}},[t._v("#")]),t._v(" 第三版，改进一点点")]),t._v(" "),n("p",[t._v("执行用时 :164 ms, 在所有 cpp 提交中击败了70.34%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :18.7 MB, 在所有 cpp 提交中击败了7.76%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("double findMaxAverage(vector<int>& nums, int k) {\n\tvector<int> res;\n\tres.reserve(k);\n\tint i = 0;\n\tfor (; i < k; ++i) {\n\t\tres.push_back(nums[i]);\t\t\n\t}\n\tint sum = accumulate(res.begin(), res.end(), 0);\n\tint result = sum;\n\tfor ( ; i < nums.size(); ++i) {\n\n\t\tsum -= res[i % k];\n\t\tres[i% k] = nums[i];\n\t\tsum += nums[i];\n\t\tresult = max(sum,result);\n\t}\n\treturn result*1.0/k;\n\n}\n")])])]),n("p",{attrs:{id:"非递减数列"}}),t._v(" "),n("h3",{attrs:{id:"_665-非递减数列-很好的题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_665-非递减数列-很好的题"}},[t._v("#")]),t._v(" 665. 非递减数列 很好的题")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/non-decreasing-array/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("给定一个长度为 "),n("code",[t._v("n")]),t._v(" 的整数数组，你的任务是判断在"),n("strong",[t._v("最多")]),t._v("改变 "),n("code",[t._v("1")]),t._v(" 个元素的情况下，该数组能否变成一个非递减数列。")]),t._v(" "),n("p",[t._v("我们是这样定义一个非递减数列的： 对于数组中所有的 "),n("code",[t._v("i")]),t._v(" (1 <= i < n)，满足 "),n("code",[t._v("array[i] <= array[i + 1]")]),t._v("。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: [4,2,3]\n输出: True\n解释: 你可以通过把第一个4变成1来使得它成为一个非递减数列。\n")])])]),n("p",[n("strong",[t._v("示例 2:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: [4,2,1]\n输出: False\n解释: 你不能在只改变一个元素的情况下将其变为非递减数列。\n")])])]),n("p",[n("strong",[t._v("说明:")]),t._v(" "),n("code",[t._v("n")]),t._v(" 的范围为 [1, 10,000]。")]),t._v(" "),n("h4",{attrs:{id:"第一版-没做出来-呜呜呜"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-没做出来-呜呜呜"}},[t._v("#")]),t._v(" 第一版，没做出来，呜呜呜")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkPossibility")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4,2,3")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" found "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" minNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t\tminNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("minNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("minNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("found"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tminNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\tfound "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tfound "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\tminNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" minNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" found"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h4",{attrs:{id:"第二版-看了解析-只能说差一点就解出来了"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二版-看了解析-只能说差一点就解出来了"}},[t._v("#")]),t._v(" 第二版，看了解析，只能说差一点就解出来了")]),t._v(" "),n("p",[t._v("解析")]),t._v(" "),n("p",[t._v("这道题给了我们一个数组，说我们最多有1次修改某个数字的机会，\n问能不能将数组变为非递减数组。题目中给的例子太少，不能覆盖所有情况，我们再来看下面三个例子：\n4，2，3\n-1，4，2，3\n2，3，3，2，4\n我们通过分析上面三个例子可以发现，当我们发现后面的数字小于前面的数字产生冲突后，\n[1]有时候需要修改前面较大的数字(比如前两个例子需要修改4)，\n[2]有时候却要修改后面较小的那个数字(比如前第三个例子需要修改2)，\n那么有什么内在规律吗？是有的，判断修改那个数字其实跟再前面一个数的大小有关系，\n首先如果再前面的数不存在，比如例子1，4前面没有数字了，我们直接修改前面的数字为当前的数字2即可。\n而当再前面的数字存在，并且小于当前数时，比如例子2，-1小于2，我们还是需要修改前面的数字4为当前数字2；\n如果再前面的数大于当前数，比如例子3，3大于2，我们需要修改当前数2为前面的数3。")]),t._v(" "),n("p",[t._v("执行用时 :32 ms, 在所有 cpp 提交中击败了74.07%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :10.4 MB, 在所有 cpp 提交中击败了70.18%的用户")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkPossibility")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4,2,3")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("count"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tcount"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//前一个数大于当前值")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\tnums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n\t\t\tnums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" count"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",{attrs:{id:"最长连续递增序列"}}),t._v(" "),n("h3",{attrs:{id:"_674-最长连续递增序列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_674-最长连续递增序列"}},[t._v("#")]),t._v(" 674. 最长连续递增序列")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("给定一个未经排序的整数数组，找到最长且"),n("strong",[t._v("连续")]),t._v("的的递增序列。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: [1,3,5,4,7]\n输出: 3\n解释: 最长连续递增序列是 [1,3,5], 长度为3。\n尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。 \n")])])]),n("p",[n("strong",[t._v("示例 2:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: [2,2,2,2,2]\n输出: 1\n解释: 最长连续递增序列是 [2], 长度为1。\n")])])]),n("p",[t._v("**注意：**数组长度不会超过10000。")]),t._v(" "),n("h4",{attrs:{id:"第一版-自己写的-很慢啊-比较low"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-自己写的-很慢啊-比较low"}},[t._v("#")]),t._v(" 第一版，自己写的，很慢啊，比较low")]),t._v(" "),n("p",[t._v("执行用时 :28 ms, 在所有 cpp 提交中击败了14.37%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :25.3 MB, 在所有 cpp 提交中击败了5.21%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int findLengthOfLCIS(vector<int>& nums) {\n\n\tstack<int>res;\n\tsize_t maxLen = 0;\n\tfor (auto& n : nums) {\n\t\t\n\t\tif (res.empty() || n > res.top())//为空或者当前值大于前面一个值\n\t\t\tres.push(n);\n\n\t\telse//小于等于当前top,千万记得要把这次的值放进去\n\t\t{\n\t\t\tmaxLen = (res.size() > maxLen ? res.size() : maxLen);\n\t\t\t(stack<int>()).swap(res);\n\t\t\tres.push(n);\n\t\t}\n\t\t\n\t}\n\n\tmaxLen = (res.size() > maxLen ? res.size() : maxLen);\n\treturn maxLen;\n\n\n}\n")])])]),n("h4",{attrs:{id:"第二版-自己改进了一下-不过性能还是不太行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二版-自己改进了一下-不过性能还是不太行"}},[t._v("#")]),t._v(" 第二版，自己改进了一下，不过性能还是不太行")]),t._v(" "),n("p",[t._v("执行用时 :16 ms, 在所有 cpp 提交中击败了70.37%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :9.5 MB, 在所有 cpp 提交中击败了47.56%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int findLengthOfLCIS(vector<int>& nums) {\n\n\n\tif (nums.empty()) return 0;\n\tint temp=nums[0];\n\tint maxLen = 0,tempLen=0;\n\tfor (auto& n : nums) {\t\n\t\tif (n > temp)//为空或者当前值大于前面一个值\n\t\t{\n\t\t\ttemp = n;\n\t\t\ttempLen++;\n\t\t}\n\t\telse//小于等于当前top,千万记得要把这次的值放进去\n\t\t{\n\t\t\tmaxLen = (tempLen > maxLen ? tempLen : maxLen);\n\t\t\ttempLen = 1;\n\t\t\ttemp = n;\t\t\n\t\t}\n\t\t\n\t}\n\n\tmaxLen = (tempLen > maxLen ? tempLen : maxLen);\n\treturn maxLen;\n}\n")])])]),n("p",{attrs:{id:"数组的度"}}),t._v(" "),n("h3",{attrs:{id:"_697-数组的度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_697-数组的度"}},[t._v("#")]),t._v(" 697. 数组的度")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/degree-of-an-array/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("给定一个非空且只包含非负数的整数数组 "),n("code",[t._v("nums")]),t._v(", 数组的度的定义是指数组里任一元素出现频数的最大值。")]),t._v(" "),n("p",[t._v("你的任务是找到与 "),n("code",[t._v("nums")]),t._v(" 拥有相同大小的度的最短连续子数组，返回其长度。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1:")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("输入"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n输出"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n解释"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n输入数组的度是"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("，因为元素"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("和"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("的出现频数最大，均为"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("\n连续子数组里面拥有相同度的有如下所示"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n最短连续子数组"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("的长度为"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("，所以返回"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("\n")])])]),n("p",[n("strong",[t._v("示例 2:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: [1,2,2,3,1,4,2]\n输出: 6\n")])])]),n("p",[n("strong",[t._v("注意:")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("nums.length")]),t._v(" 在1到50,000区间范围内。")]),t._v(" "),n("li",[n("code",[t._v("nums[i]")]),t._v(" 是一个在0到49,999范围内的整数。")])]),t._v(" "),n("h4",{attrs:{id:"第一版-自己写的-还行吧"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-自己写的-还行吧"}},[t._v("#")]),t._v(" 第一版 自己写的，还行吧")]),t._v(" "),n("p",[t._v("执行用时 :48 ms, 在所有 cpp 提交中击败了72.42%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :15.2 MB, 在所有 cpp 提交中击败了12.36%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int findShortestSubArray(vector<int>& nums) {\n\n\tunordered_map<int, vector<int>> res;//val first出现的位序,last出现的位序\n\tint span=0;\n\tfor (size_t i = 0; i < nums.size(); ++i) {\n\t\tres[nums[i]].push_back(i);\n\t\tspan = span > res[nums[i]].size() ? span : res[nums[i]].size();\n\t}\n\n\tint minLen = nums.size(),temp;\n\tfor (auto& r : res) {\n\n\t\tif (r.second.size() == span) {\n\t\t\ttemp = r.second[r.second.size() - 1] - r.second[0];\n\t\t\tminLen = minLen < temp ? minLen : temp;\n\t\t\t\n\t\t}\n\n\t}\n\treturn minLen + 1;\n}\n")])])]),n("p",{attrs:{id:"比特与比特字符"}}),t._v(" "),n("h3",{attrs:{id:"_717-1比特与2比特字符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_717-1比特与2比特字符"}},[t._v("#")]),t._v(" 717. 1比特与2比特字符")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/1-bit-and-2-bit-characters/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("有两种特殊字符。第一种字符可以用一比特"),n("code",[t._v("0")]),t._v("来表示。第二种字符可以用两比特("),n("code",[t._v("10")]),t._v(" 或 "),n("code",[t._v("11")]),t._v(")来表示。")]),t._v(" "),n("p",[t._v("现给一个由若干比特组成的字符串。问最后一个字符是否必定为一个一比特字符。给定的字符串总是由0结束。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: \nbits = [1, 0, 0]\n输出: True\n解释: \n唯一的编码方式是一个两比特字符和一个一比特字符。所以最后一个字符是一比特字符。\n")])])]),n("p",[n("strong",[t._v("示例 2:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: \nbits = [1, 1, 1, 0]\n输出: False\n解释: \n唯一的编码方式是两比特字符和两比特字符。所以最后一个字符不是一比特字符。\n")])])]),n("p",[n("strong",[t._v("注意:")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("1 <= len(bits) <= 1000")]),t._v(".")]),t._v(" "),n("li",[n("code",[t._v("bits[i]")]),t._v(" 总是"),n("code",[t._v("0")]),t._v(" 或 "),n("code",[t._v("1")]),t._v(".")])]),t._v(" "),n("h4",{attrs:{id:"第一版-自己写的-速度较慢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-自己写的-速度较慢"}},[t._v("#")]),t._v(" 第一版,自己写的，速度较慢")]),t._v(" "),n("p",[t._v("执行用时 :8 ms, 在所有 cpp 提交中击败了54.05%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :8.6 MB, 在所有 cpp 提交中击败了84.88%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("bool isOneBitCharacter(vector<int>& bits) {\n\n\n\tint low = 0, high = bits.size()-2;\n\twhile (low < high) {\n\n\t\tif (bits[low] == 1) {\n\t\t\tlow++;\n\t\t\tif (bits[low] == 1 || bits[low] == 0)  low ++;\n\n\t\t}else if (bits[low] == 0) low++;\n\t}\n\n\tif (low == high) {\n\t\tif (bits[low] == 0 && bits[low + 1] == 0)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\telse\n\t\treturn bits[low] == 0;\n}\n")])])]),n("h4",{attrs:{id:"第二版-换了一个思路"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二版-换了一个思路"}},[t._v("#")]),t._v(" 第二版，换了一个思路")]),t._v(" "),n("p",[t._v("执行用时 :4 ms, 在所有 cpp 提交中击败了90.45%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :8.6 MB, 在所有 cpp 提交中击败了80.76%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("bool isOneBitCharacter(vector<int>& bits) {\n\n\tif (bits[bits.size() - 1] == 1) return false;\n\n\tint low = 0, high = bits.size();\n\twhile (low < high) {\n\n\t\tif (bits[low] == 1) {\n\t\t\tlow+=2;\n\n\t\t}\n\t\telse if (bits[low] == 0) { \t\t\t\n\t\t\tif (low == high - 1) break;\n\t\t\tlow++;\n\t\t}\n\t}\n\n\tif (low == high-1) {\n\t\treturn true;\n\t}\n\telse\n\t\treturn false;\n}\n")])])]),n("p",{attrs:{id:"寻找数组的中心索引"}}),t._v(" "),n("h3",{attrs:{id:"_724-寻找数组的中心索引"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_724-寻找数组的中心索引"}},[t._v("#")]),t._v(" 724. 寻找数组的中心索引")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/find-pivot-index/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("给定一个整数类型的数组 "),n("code",[t._v("nums")]),t._v("，请编写一个能够返回数组**“中心索引”**的方法。")]),t._v(" "),n("p",[t._v("我们是这样定义数组"),n("strong",[t._v("中心索引")]),t._v("的：数组中心索引的左侧所有元素相加的和等于右侧所有元素相加的和。")]),t._v(" "),n("p",[t._v("如果数组不存在中心索引，那么我们应该返回 -1。如果数组有多个中心索引，那么我们应该返回最靠近左边的那一个。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: \nnums = [1, 7, 3, 6, 5, 6]\n输出: 3\n解释: \n索引3 (nums[3] = 6) 的左侧数之和(1 + 7 + 3 = 11)，与右侧数之和(5 + 6 = 11)相等。\n同时, 3 也是第一个符合要求的中心索引。\n")])])]),n("p",[n("strong",[t._v("示例 2:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: \nnums = [1, 2, 3]\n输出: -1\n解释: \n数组中不存在满足此条件的中心索引。\n")])])]),n("p",[n("strong",[t._v("说明:")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("nums")]),t._v(" 的长度范围为 "),n("code",[t._v("[0, 10000]")]),t._v("。")]),t._v(" "),n("li",[t._v("任何一个 "),n("code",[t._v("nums[i]")]),t._v(" 将会是一个范围在 "),n("code",[t._v("[-1000, 1000]")]),t._v("的整数。")])]),t._v(" "),n("h4",{attrs:{id:"第一版-这题比想象中的要容易许多啊"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-这题比想象中的要容易许多啊"}},[t._v("#")]),t._v(" 第一版，这题比想象中的要容易许多啊..")]),t._v(" "),n("p",[t._v("执行用时 :20 ms, 在所有 cpp 提交中击败了98.55%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :9.9 MB, 在所有 cpp 提交中击败了77.04%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    int pivotIndex(vector<int>& nums) {\n    int sum = accumulate(nums.begin(), nums.end(), 0);\n\tint temp = 0;\n\tfor (int i = 0; i < nums.size(); ++i) {\n\t\tif (temp * 2 == sum - nums[i]) {\n\t\t\treturn i;\n\t\t}\n\t\ttemp += nums[i];\n\n\t}\n\treturn -1;\n        \n    }\n")])])]),n("p",{attrs:{id:"至少是其他数字两倍的最大数"}}),t._v(" "),n("h3",{attrs:{id:"_747-至少是其他数字两倍的最大数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_747-至少是其他数字两倍的最大数"}},[t._v("#")]),t._v(" 747. 至少是其他数字两倍的最大数")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/largest-number-at-least-twice-of-others/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("在一个给定的数组"),n("code",[t._v("nums")]),t._v("中，总是存在一个最大元素 。")]),t._v(" "),n("p",[t._v("查找数组中的最大元素是否至少是数组中每个其他数字的两倍。")]),t._v(" "),n("p",[t._v("如果是，则返回最大元素的索引，否则返回-1。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: nums = [3, 6, 1, 0]\n输出: 1\n解释: 6是最大的整数, 对于数组中的其他整数,\n6大于数组中其他元素的两倍。6的索引是1, 所以我们返回1.\n")])])]),n("p",[n("strong",[t._v("示例 2:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: nums = [1, 2, 3, 4]\n输出: -1\n解释: 4没有超过3的两倍大, 所以我们返回 -1.\n")])])]),n("p",[n("strong",[t._v("提示:")])]),t._v(" "),n("ol",[n("li",[n("code",[t._v("nums")]),t._v(" 的长度范围在"),n("code",[t._v("[1, 50]")]),t._v(".")]),t._v(" "),n("li",[t._v("每个 "),n("code",[t._v("nums[i]")]),t._v(" 的整数范围在 "),n("code",[t._v("[0, 100]")]),t._v(".")])]),t._v(" "),n("h4",{attrs:{id:"第一版-挺简单的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-挺简单的"}},[t._v("#")]),t._v(" 第一版，挺简单的")]),t._v(" "),n("p",[t._v("执行用时 :0 ms, 在所有 cpp 提交中击败了100.00%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :8.5 MB, 在所有 cpp 提交中击败了74.18%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int dominantIndex(vector<int>& nums) {\n\t\n\tint index = 0, maxNum = nums[0];\n\tfor (size_t i = 1; i < nums.size(); ++i) {\n\n\t\tif (maxNum < nums[i]) {\n\t\t\tmaxNum = nums[i];\n\t\t\tindex = i;\n\t\t}\n\t}\n\n\tsort(nums.begin(), nums.end());\n\tfor (int i = nums.size() - 2; i >= 0; --i) {\n\t\tif (nums[i] * 2 > maxNum) return -1;\n\t}\n\n\treturn index;\n}\n")])])]),n("p",{attrs:{id:"较大分组的位置"}}),t._v("\n### 830. 较大分组的位置\n"),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/positions-of-large-groups/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("在一个由小写字母构成的字符串 "),n("code",[t._v("S")]),t._v(" 中，包含由一些连续的相同字符所构成的分组。")]),t._v(" "),n("p",[t._v("例如，在字符串 "),n("code",[t._v('S = "abbxxxxzyy"')]),t._v(" 中，就含有 "),n("code",[t._v('"a"')]),t._v(", "),n("code",[t._v('"bb"')]),t._v(", "),n("code",[t._v('"xxxx"')]),t._v(", "),n("code",[t._v('"z"')]),t._v(" 和 "),n("code",[t._v('"yy"')]),t._v(" 这样的一些分组。")]),t._v(" "),n("p",[t._v("我们称所有包含大于或等于三个连续字符的分组为较大分组。找到每一个较大分组的起始和终止位置。")]),t._v(" "),n("p",[t._v("最终结果按照字典顺序输出。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1:")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("输入"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abbxxxxzzy"')]),t._v("\n输出"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n解释"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxxx"')]),t._v(" 是一个起始于 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" 且终止于 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" 的较大分组。\n")])])]),n("p",[n("strong",[t._v("示例 2:")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("输入"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),t._v("\n输出"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n解释"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),t._v(" 和 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),t._v(" 均不是符合要求的较大分组。\n")])])]),n("p",[n("strong",[t._v("示例 3:")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("输入"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcdddeeeeaabbbcd"')]),t._v("\n输出"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),n("p",[n("strong",[t._v("说明:")]),t._v(" "),n("code",[t._v("1 <= S.length <= 1000")])]),t._v(" "),n("h4",{attrs:{id:"第一版-自己写的-比较慢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-自己写的-比较慢"}},[t._v("#")]),t._v(" 第一版，自己写的，比较慢")]),t._v(" "),n("p",[t._v("执行用时 :16 ms, 在所有 cpp 提交中击败了35.69%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :9.3 MB, 在所有 cpp 提交中击败了82.42%的用户")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("largeGroupPositions")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tvector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" ch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tcount "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\tch "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" ch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t\tcount"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\t\ti"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t\tres"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push_back")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n\t\t\t\ti"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n\t\t\ti"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",{attrs:{id:"矩阵中的幻方"}}),t._v(" "),n("h3",{attrs:{id:"_840-矩阵中的幻方"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_840-矩阵中的幻方"}},[t._v("#")]),t._v(" 840. 矩阵中的幻方")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/magic-squares-in-grid/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("3 x 3 的幻方是一个填充有"),n("strong",[t._v("从 1 到 9")]),t._v(" 的不同数字的 3 x 3 矩阵，其中每行，每列以及两条对角线上的各数之和都相等。")]),t._v(" "),n("p",[t._v("给定一个由整数组成的 "),n("code",[t._v("grid")]),t._v("，其中有多少个 3 × 3 的 “幻方” 子矩阵？（每个子矩阵都是连续的）。")]),t._v(" "),n("p",[n("strong",[t._v("示例：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入: [[4,3,8,4],\n      [9,5,1,9],\n      [2,7,6,2]]\n输出: 1\n解释: \n下面的子矩阵是一个 3 x 3 的幻方：\n438\n951\n276\n\n而这一个不是：\n384\n519\n762\n\n总的来说，在本示例所给定的矩阵中只有一个 3 x 3 的幻方子矩阵。\n")])])]),n("p",[n("strong",[t._v("提示:")])]),t._v(" "),n("ol",[n("li",[n("code",[t._v("1 <= grid.length <= 10")])]),t._v(" "),n("li",[n("code",[t._v("1 <= grid[0].length <= 10")])]),t._v(" "),n("li",[n("code",[t._v("0 <= grid[i][j] <= 15")])])]),t._v(" "),n("h4",{attrs:{id:"第一版-没意思-纯暴力法-就是比较麻烦"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-没意思-纯暴力法-就是比较麻烦"}},[t._v("#")]),t._v(" 第一版，没意思，纯暴力法，就是比较麻烦")]),t._v(" "),n("p",[t._v("执行用时 :8 ms, 在所有 cpp 提交中击败了51.79%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :9.4 MB, 在所有 cpp 提交中击败了19.05%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('int equal(vector<int>& a, vector<int>& b, vector<int>& c) {\n\t\n\t//cout << a[0] << a[1] << a[2] << endl;\n\t//cout << b[0] << b[1] << b[2] << endl;\n\t//cout << c[0] << c[1] << c[2] << endl;\n\n\tunordered_set<int> res;\n\tfor (auto& i : a) {\n\t\tif (i < 1 || i > 9) return 0;\n\t\tres.insert(i);\n\t}\n\tif (res.size() != 3) return 0;\n\tfor (auto& i : b) {\n\t\tif (i < 1 || i > 9) return 0;\n\t\tres.insert(i);\n\t}\n\tif (res.size() != 6) return 0;\n\tfor (auto& i : c) {\n\t\tif (i < 1 || i > 9) return 0;\n\t\tres.insert(i);\n\t}\n\tif (res.size() != 9) return 0;\n\n\n\t\n\tint sum = a[0] + a[1] + a[2];\n\tif (sum == b[0] + b[1] + b[2] && c[0] + c[1] + c[2] == sum) {//行\n\t\tif (a[0] + b[0] + c[0] == sum && a[1] + b[1] + c[1]== sum &&  a[2] + b[2] + c[2]==sum) {//列\t\t\t\n\t\t\tif (a[0] + b[1]+c[2] ==sum&&b[1]+ a[2] + c[0] ==sum) //a0+b1+c2   a2+b1+c0\n\t\t\t\treturn 1;\n\t\t\telse\n\t\t\t\treturn 0;\t\t\n\t\t}\n\t\telse\n\t\t\treturn 0;\n\t}\n\telse\n\t\treturn 0;\n}\n\n\nint numMagicSquaresInside(vector<vector<int>>& grid) {\n\tif (grid.size() < 3 || grid[0].size() < 3) return 0;\n\tint count = 0;\n\tvector<int> a, b, c;\n\ta.resize(3);\n\tb.resize(3);\n\tc.resize(3);\n\tint len1 = grid.size(), len2 = grid[0].size();//len1=3,len2=4\n\tfor (int i = 0; i <= len1 - 3; ++i) {\n\t\tint j = 0;\n\t\twhile (j <= len2 - 3) {\n\n\n\t\t\ta[0]=(grid[i][j + 0]);\n\t\t\ta[1] = (grid[i][j + 1]);\n\t\t\ta[2] = (grid[i][j + 2]);\n\t\t\t//cout << j << " ";\n\t\t\tb[0] = (grid[i+1][j + 0]);\n\t\t\tb[1] = (grid[i+1][j + 1]);\n\t\t\tb[2] = (grid[i+1][j + 2]);\n\t\t\t//cout << j << " ";\n\t\t\tc[0] = (grid[i + 2][j + 0]);\n\t\t\tc[1] = (grid[i + 2][j + 1]);\n\t\t\tc[2] = (grid[i + 2][j + 2]);\n\t\t\t//cout << j << " " << endl;\n\t\t\tcount += equal(a, b, c);\n\t\t\tj++;\n\t\t\t//cout << j << " ";\n\t\t\t//cout << endl << "count " << count<<endl;\n\n\t\t}\n\t\t//cout << endl;\n\t}\n\n\treturn count;\n\n}\n')])])]),n("h4",{attrs:{id:"第二版-经过提示-改进一点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二版-经过提示-改进一点"}},[t._v("#")]),t._v(" 第二版，经过提示，改进一点")]),t._v(" "),n("p",[t._v("执行用时 :8 ms, 在所有 cpp 提交中击败了51.79%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :8.9 MB, 在所有 cpp 提交中击败了78.57%的用户")]),t._v(" "),n("p",[t._v("中心点必须是5，且每行每列都需要是15才可以")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('int equal(vector<int>& a, vector<int>& b, vector<int>& c) {\n\t\n\t//cout << a[0] << a[1] << a[2] << endl;\n\t//cout << b[0] << b[1] << b[2] << endl;\n\t//cout << c[0] << c[1] << c[2] << endl;\n\n\tunordered_set<int> res;\n\tfor (auto& i : a) {\n\t\tif (i < 1 || i > 9) return 0;\n\t\tres.insert(i);\n\t}\n\tif (res.size() != 3) return 0;\n\tfor (auto& i : b) {\n\t\tif (i < 1 || i > 9) return 0;\n\t\tres.insert(i);\n\t}\n\tif (res.size() != 6) return 0;\n\tfor (auto& i : c) {\n\t\tif (i < 1 || i > 9) return 0;\n\t\tres.insert(i);\n\t}\n\tif (res.size() != 9) return 0;\n\n\n\t\n\tint sum = a[0] + a[1] + a[2]; //sum其实必须是15才可以\n\tif (sum == b[0] + b[1] + b[2] && c[0] + c[1] + c[2] == sum) {//行\n\t\tif (a[0] + b[0] + c[0] == sum && a[1] + b[1] + c[1]== sum &&  a[2] + b[2] + c[2]==sum) {//列\t\t\t\n\t\t\tif (a[0] + b[1]+c[2] ==sum&&b[1]+ a[2] + c[0] ==sum) //a0+b1+c2   a2+b1+c0\n\t\t\t\treturn 1;\n\t\t\telse\n\t\t\t\treturn 0;\t\t\n\t\t}\n\t\telse\n\t\t\treturn 0;\n\t}\n\telse\n\t\treturn 0;\n}\n\n\nint numMagicSquaresInside(vector<vector<int>>& grid) {\n\tif (grid.size() < 3 || grid[0].size() < 3) return 0;\n\tint count = 0;\n\tvector<int> a, b, c;\n\ta.resize(3);\n\tb.resize(3);\n\tc.resize(3);\n\tint len1 = grid.size(), len2 = grid[0].size();//len1=3,len2=4\n\tfor (int i = 0; i <= len1 - 3; ++i) {\n\t\tint j = 0;\n\t\twhile (j <= len2 - 3) {\n\n\t\t\tif (grid[i + 1][j + 1] != 5) { \n\t\t\t\tj++;\n\t\t\t\tcontinue; \n\t\t\t}\n\n\t\t\ta[0]=(grid[i][j + 0]);\n\t\t\ta[1] = (grid[i][j + 1]);\n\t\t\ta[2] = (grid[i][j + 2]);\n\t\t\t//cout << j << " ";\n\t\t\tb[0] = (grid[i+1][j + 0]);\n\t\t\tb[1] = (grid[i+1][j + 1]);\n\t\t\tb[2] = (grid[i+1][j + 2]);\n\t\t\t//cout << j << " ";\n\t\t\tc[0] = (grid[i + 2][j + 0]);\n\t\t\tc[1] = (grid[i + 2][j + 1]);\n\t\t\tc[2] = (grid[i + 2][j + 2]);\n\t\t\t//cout << j << " " << endl;\n\t\t\tcount += equal(a, b, c);\n\t\t\tj++;\n\t\t\t//cout << j << " ";\n\t\t\t//cout << endl << "count " << count<<endl;\n\n\t\t}\n\t\t//cout << endl;\n\t}\n\n\treturn count;\n\n}\n')])])]),n("p",{attrs:{id:"到最近的人的最大距离"}}),t._v(" "),n("h3",{attrs:{id:"_849-到最近的人的最大距离-好题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_849-到最近的人的最大距离-好题"}},[t._v("#")]),t._v(" 849. 到最近的人的最大距离 好题")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/maximize-distance-to-closest-person/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("在一排座位（ "),n("code",[t._v("seats")]),t._v("）中，"),n("code",[t._v("1")]),t._v(" 代表有人坐在座位上，"),n("code",[t._v("0")]),t._v(" 代表座位上是空的。")]),t._v(" "),n("p",[t._v("至少有一个空座位，且至少有一人坐在座位上。")]),t._v(" "),n("p",[t._v("亚历克斯希望坐在一个能够使他与离他最近的人之间的距离达到最大化的座位上。")]),t._v(" "),n("p",[t._v("返回他到离他最近的人的最大距离。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：[1,0,0,0,1,0,1]\n输出：2\n解释：\n如果亚历克斯坐在第二个空位（seats[2]）上，他到离他最近的人的距离为 2 。\n如果亚历克斯坐在其它任何一个空位上，他到离他最近的人的距离为 1 。\n因此，他到离他最近的人的最大距离是 2 。 \n")])])]),n("p",[n("strong",[t._v("示例 2：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：[1,0,0,0]\n输出：3\n解释： \n如果亚历克斯坐在最后一个座位上，他离最近的人有 3 个座位远。\n这是可能的最大距离，所以答案是 3 。\n")])])]),n("p",[n("strong",[t._v("提示：")])]),t._v(" "),n("ol",[n("li",[n("code",[t._v("1 <= seats.length <= 20000")])]),t._v(" "),n("li",[n("code",[t._v("seats")]),t._v(" 中只含有 0 和 1，至少有一个 "),n("code",[t._v("0")]),t._v("，且至少有一个 "),n("code",[t._v("1")]),t._v("。")])]),t._v(" "),n("h4",{attrs:{id:"第一版-有参考别人"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-有参考别人"}},[t._v("#")]),t._v(" 第一版，有参考别人")]),t._v(" "),n("p",[t._v("保存首位连续0的个数，和（中间连续0的个数+1）/2，最近进行比较即可")]),t._v(" "),n("p",[t._v("执行用时 :16 ms, 在所有 cpp 提交中击败了74.71%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :10 MB, 在所有 cpp 提交中击败了82.11%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int maxDistToClosest(vector<int>& seats) {\n\n\tint lowZeroCut=0, highZeroCut = 0,i = 0, len = seats.size();\n\tint j = len - 1;\n\n\twhile (seats[i] == 0 && i < len) {\n\t\tlowZeroCut++;\n\t\ti++;\n\t}\n\ti++;//i已经等于1了，跳过即可\n\n\twhile (seats[j] == 0 && j >=0) {\n\t\thighZeroCut++;\n\t\tj--;\n\t}\n    //注意这里不可以再像上面一样再跳过j了，还需要他在下面进行一个判断条件\n//中间连续的0的判断依据就是遇到1了即可以判断了，仔细想想\n\thighZeroCut = max(lowZeroCut, highZeroCut);//保存此时的最大值\n\tlowZeroCut = 0;\n\tint cut = 0;\n\twhile (i <= j) {\n\t\tif (seats[i++] == 0)\n\t\t{\n\t\t\tcut++;\n\t\t}\n\t\telse {//遇到1了\n\t\t\tlowZeroCut = max(cut, lowZeroCut);\n\t\t\tcut = 0;\n\t\t}\n\t}\n\n\thighZeroCut = max(highZeroCut, (lowZeroCut + 1) / 2);\n\treturn highZeroCut;\n\n}\n")])])]),n("p",{attrs:{id:"公平的糖果交换"}}),t._v(" "),n("h3",{attrs:{id:"_888-公平的糖果交换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_888-公平的糖果交换"}},[t._v("#")]),t._v(" 888. 公平的糖果交换")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/fair-candy-swap/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("爱丽丝和鲍勃有不同大小的糖果棒："),n("code",[t._v("A[i]")]),t._v(" 是爱丽丝拥有的第 "),n("code",[t._v("i")]),t._v(" 块糖的大小，"),n("code",[t._v("B[j]")]),t._v(" 是鲍勃拥有的第 "),n("code",[t._v("j")]),t._v(" 块糖的大小。")]),t._v(" "),n("p",[t._v("因为他们是朋友，所以他们想交换一个糖果棒，这样交换后，他们都有相同的糖果总量。"),n("em",[t._v("（一个人拥有的糖果总量是他们拥有的糖果棒大小的总和。）")])]),t._v(" "),n("p",[t._v("返回一个整数数组 "),n("code",[t._v("ans")]),t._v("，其中 "),n("code",[t._v("ans[0]")]),t._v(" 是爱丽丝必须交换的糖果棒的大小，"),n("code",[t._v("ans[1]")]),t._v(" 是 Bob 必须交换的糖果棒的大小。")]),t._v(" "),n("p",[t._v("如果有多个答案，你可以返回其中任何一个。保证答案存在。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：A = [1,1], B = [2,2]\n输出：[1,2]\n")])])]),n("p",[n("strong",[t._v("示例 2：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：A = [1,2], B = [2,3]\n输出：[1,2]\n")])])]),n("p",[n("strong",[t._v("示例 3：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：A = [2], B = [1,3]\n输出：[2,3]\n")])])]),n("p",[n("strong",[t._v("示例 4：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：A = [1,2,5], B = [2,4]\n输出：[5,4]\n")])])]),n("p",[n("strong",[t._v("提示：")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("1 <= A.length <= 10000")])]),t._v(" "),n("li",[n("code",[t._v("1 <= B.length <= 10000")])]),t._v(" "),n("li",[n("code",[t._v("1 <= A[i] <= 100000")])]),t._v(" "),n("li",[n("code",[t._v("1 <= B[i] <= 100000")])]),t._v(" "),n("li",[t._v("保证爱丽丝与鲍勃的糖果总量不同。")]),t._v(" "),n("li",[t._v("答案肯定存在。")])]),t._v(" "),n("h4",{attrs:{id:"第一版-自己写的-执行这也太慢了"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-自己写的-执行这也太慢了"}},[t._v("#")]),t._v(" 第一版，自己写的，执行这也太慢了")]),t._v(" "),n("p",[t._v("执行用时 :1224 ms, 在所有 cpp 提交中击败了14.22%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :12 MB, 在所有 cpp 提交中击败了95.49%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\n vector<int> fairCandySwap(vector<int>& A, vector<int>& B) {\n    int sumA=0, sumB=0;\n\tfor (auto& a : A) {\n\t\tsumA += a;\n\t}\n\tfor (auto& b : B) {\n\t\tsumB += b;\n\t}\n\n\tint temp = sumA - sumB > 0 ? sumA - sumB : sumB - sumA;\n\ttemp = temp / 2;\n\tfor (auto& a : A) {\n\n\t\tfor (auto& b : B) {\n\t\t\tif (a - b == temp || b - a == temp)\n\t\t\t{\n\t\t\t\tif(sumA - a + b == sumB - b + a)\n\t\t\t\t\treturn { a,b };\n\t\t\t}\n\t\t}\n\t}\n\treturn { 0,0 };\n        \n    }\n")])])]),n("h4",{attrs:{id:"第二版-改进了一下-加一个二分查找-快多了"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二版-改进了一下-加一个二分查找-快多了"}},[t._v("#")]),t._v(" 第二版，改进了一下，加一个二分查找，快多了")]),t._v(" "),n("p",[t._v("执行用时 :132 ms, 在所有 cpp 提交中击败了88.39%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :12.2 MB, 在所有 cpp 提交中击败了83.46%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\nvector<int> fairCandySwap(vector<int>& A, vector<int>& B) {\n\n\tint sumA=0, sumB=0;\n\tfor (auto& a : A) {\n\t\tsumA += a;\n\t}\n\tfor (auto& b : B) {\n\t\tsumB += b;\n\t}\n\n\tint b=0,temp = sumA - sumB > 0 ? sumA - sumB : sumB - sumA;\n\ttemp = temp / 2;\n\n\tsort(A.begin(), A.end());\n\tsort(B.begin(), B.end());\n\n\tfor (auto& a : A) {\n\n\t\t\tif (lower_bound(B.begin(),B.end(),a + temp)!=B.end())\n\t\t\t{\n\t\t\t\tb = *(lower_bound(B.begin(), B.end(), a + temp));\n\t\t\t\tif(sumA - a + b == sumB - b + a)\n\t\t\t\t\treturn { a,b };\n\t\t\t}\n\t\t\tif (lower_bound(B.begin(), B.end(), a - temp) != B.end())\n\t\t\t{\n\t\t\n\t\t\t\tb = *(lower_bound(B.begin(), B.end(), a - temp));\n\t\t\t\tif (sumA - a + b == sumB - b + a)\n\t\t\t\t\treturn { a,b };\n\t\t\t}\n\t}\n\n\treturn { 0,0 };\n\n}\n")])])]),n("p",{attrs:{id:"卡牌分组"}}),t._v(" "),n("h3",{attrs:{id:"_914-卡牌分组-这也是道好题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_914-卡牌分组-这也是道好题"}},[t._v("#")]),t._v(" 914. 卡牌分组  这也是道好题")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/x-of-a-kind-in-a-deck-of-cards/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("给定一副牌，每张牌上都写着一个整数。")]),t._v(" "),n("p",[t._v("此时，你需要选定一个数字 "),n("code",[t._v("X")]),t._v("，使我们可以将整副牌按下述规则分成 1 组或更多组：")]),t._v(" "),n("ul",[n("li",[t._v("每组都有 "),n("code",[t._v("X")]),t._v(" 张牌。")]),t._v(" "),n("li",[t._v("组内所有的牌上都写着相同的整数。")])]),t._v(" "),n("p",[t._v("仅当你可选的 "),n("code",[t._v("X >= 2")]),t._v(" 时返回 "),n("code",[t._v("true")]),t._v("。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：[1,2,3,4,4,3,2,1]\n输出：true\n解释：可行的分组是 [1,1]，[2,2]，[3,3]，[4,4]\n")])])]),n("p",[n("strong",[t._v("示例 2：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：[1,1,1,2,2,2,3,3]\n输出：false\n解释：没有满足要求的分组。\n")])])]),n("p",[n("strong",[t._v("示例 3：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：[1]\n输出：false\n解释：没有满足要求的分组。\n")])])]),n("p",[n("strong",[t._v("示例 4：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：[1,1]\n输出：true\n解释：可行的分组是 [1,1]\n")])])]),n("p",[n("strong",[t._v("示例 5：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：[1,1,2,2,2,2]\n输出：true\n解释：可行的分组是 [1,1]，[2,2]，[2,2]\n")])])]),n("p",[n("strong",[t._v("提示：")])]),t._v(" "),n("ol",[n("li",[n("code",[t._v("1 <= deck.length <= 10000")])]),t._v(" "),n("li",[n("code",[t._v("0 <= deck[i] < 10000")])])]),t._v(" "),n("h4",{attrs:{id:"第一版-没想完全-还有其他情况"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-没想完全-还有其他情况"}},[t._v("#")]),t._v(" 第一版，没想完全，还有其他情况")]),t._v(" "),n("p",[t._v("当 [1,1,1,1,2,2,2,2,2,2] 时，相当于 1:4  2:6，此时X为2的时候是可以的，也就是说要算，所有数量的共同最小公倍数，且最小公倍数要为X，X要大于等于2了")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("bool "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasGroupsSizeX")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" deck"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\tunordered_map"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" deck"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t\tres"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" minCut "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("second"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" it "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" it "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("it"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tminCut "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("minCut"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("it"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("second"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("minCut "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("second "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" minCut "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里不能简单的判断当前值是否可以整除最小值")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h4",{attrs:{id:"第二版-改进版本-好题目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二版-改进版本-好题目"}},[t._v("#")]),t._v(" 第二版，改进版本，好题目")]),t._v(" "),n("p",[t._v("执行用时 :16 ms, 在所有 cpp 提交中击败了92.34%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :9.9 MB, 在所有 cpp 提交中击败了73.24%的用户")]),t._v(" "),n("p",[t._v("在运行过程中如果发现最小值小于2或者，当前次数与最小值的最大公约数为1的时候，就该直接返回了")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('int greatestCommonDivisor(int a, int b) {\n\tint c = 0;\n\tif (a < b) swap(a, b);\n\n\twhile (true) {\n\t\tc = a % b;\n\t\tif (c == 0) return b;\n\t\telse\n\t\t{\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t}\n\t}\n\n}\n\n\nbool hasGroupsSizeX(vector<int>& deck) {\n\n\tunordered_map<int, int> res;\n\tfor (auto& a : deck) {\n\n\t\tres[a] += 1;\n\t}\n\n\tint minCut = (*(res.begin())).second, greatestCommonDivisoreNum = 0;\n\tfor (auto it = res.begin(); it != res.end(); ++it) {\n\t\tgreatestCommonDivisoreNum = greatestCommonDivisor(minCut, it->second);\n\t\tminCut = min(minCut, (*it).second);\n\t\tcout << "leastCommonMultipleNum " << greatestCommonDivisoreNum << " minCut " << minCut << endl;\n\t\tif (minCut < 2 || greatestCommonDivisoreNum == 1) return false;\n\n\t}\n\t\n\treturn true;\n\n}\n')])])]),n("p",{attrs:{id:"有效的山脉数组"}}),t._v(" "),n("h3",{attrs:{id:"_941-有效的山脉数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_941-有效的山脉数组"}},[t._v("#")]),t._v(" 941. 有效的山脉数组")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/valid-mountain-array/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("给定一个整数数组 "),n("code",[t._v("A")]),t._v("，如果它是有效的山脉数组就返回 "),n("code",[t._v("true")]),t._v("，否则返回 "),n("code",[t._v("false")]),t._v("。")]),t._v(" "),n("p",[t._v("让我们回顾一下，如果 A 满足下述条件，那么它是一个山脉数组：")]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("A.length >= 3")])])]),t._v(" "),n("li",[n("p",[t._v("在")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("0 < i < A.length - 1\n")])])]),n("p",[t._v("条件下，存在")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("i\n")])])]),n("p",[t._v("使得：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("A[0] < A[1] < ... A[i-1] < A[i]")])]),t._v(" "),n("li",[n("code",[t._v("A[i] > A[i+1] > ... > A[B.length - 1]")])])])])]),t._v(" "),n("p",[n("strong",[t._v("示例 1：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：[2,1]\n输出：false\n")])])]),n("p",[n("strong",[t._v("示例 2：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：[3,5,5]\n输出：false\n")])])]),n("p",[n("strong",[t._v("示例 3：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：[0,3,2,1]\n输出：true\n")])])]),n("p",[n("strong",[t._v("提示：")])]),t._v(" "),n("ol",[n("li",[n("code",[t._v("0 <= A.length <= 10000")])]),t._v(" "),n("li",[n("code",[t._v("0 <= A[i] <= 10000")])])]),t._v(" "),n("h4",{attrs:{id:"第一版-自己写的-还可以"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-自己写的-还可以"}},[t._v("#")]),t._v(" 第一版，自己写的，还可以")]),t._v(" "),n("p",[t._v("执行用时 :28 ms, 在所有 cpp 提交中击败了97.74%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :10.3 MB, 在所有 cpp 提交中击败了81.20%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    bool validMountainArray(vector<int>& A) {\n    if (A.size() < 3) return false;\n\tif (A[1] <= A[0]) return false;\n\tint i = 1, j = A.size() - 1;\n\twhile (i < j) {\n\n\t\tif (A[i] < A[i + 1] && A[j] < A[j - 1]) {\n\t\t\ti++;\n\t\t\tj--;\n\t\t}else\tif (A[j] < A[j - 1]) {\n\t\t\tj--;\n\t\t}\n\t\telse if(A[i] < A[i + 1]) {\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\n\t}\n\treturn i==j && j!=A.size()-1;//要预防数组最后一位为最大的情况，也就是j至少要等于A.size()-2\n        \n    }\n")])])]),n("p",{attrs:{id:"数组形式的整数加法"}}),t._v(" "),n("h3",{attrs:{id:"_989-数组形式的整数加法-经典-很经典的题目-一步步渐进-直到最优解法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_989-数组形式的整数加法-经典-很经典的题目-一步步渐进-直到最优解法"}},[t._v("#")]),t._v(" 989. 数组形式的整数加法   经典，很经典的题目，一步步渐进，直到最优解法")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/add-to-array-form-of-integer/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("对于非负整数 "),n("code",[t._v("X")]),t._v(" 而言，"),n("em",[t._v("X")]),t._v(" 的"),n("em",[t._v("数组形式")]),t._v("是每位数字按从左到右的顺序形成的数组。例如，如果 "),n("code",[t._v("X = 1231")]),t._v("，那么其数组形式为 "),n("code",[t._v("[1,2,3,1]")]),t._v("。")]),t._v(" "),n("p",[t._v("给定非负整数 "),n("code",[t._v("X")]),t._v(" 的数组形式 "),n("code",[t._v("A")]),t._v("，返回整数 "),n("code",[t._v("X+K")]),t._v(" 的数组形式。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：A = [1,2,0,0], K = 34\n输出：[1,2,3,4]\n解释：1200 + 34 = 1234\n")])])]),n("p",[n("strong",[t._v("解释 2：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：A = [2,7,4], K = 181\n输出：[4,5,5]\n解释：274 + 181 = 455\n")])])]),n("p",[n("strong",[t._v("示例 3：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：A = [2,1,5], K = 806\n输出：[1,0,2,1]\n解释：215 + 806 = 1021\n")])])]),n("p",[n("strong",[t._v("示例 4：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1\n输出：[1,0,0,0,0,0,0,0,0,0,0]\n解释：9999999999 + 1 = 10000000000\n")])])]),n("p",[n("strong",[t._v("提示：")])]),t._v(" "),n("ol",[n("li",[n("code",[t._v("1 <= A.length <= 10000")])]),t._v(" "),n("li",[n("code",[t._v("0 <= A[i] <= 9")])]),t._v(" "),n("li",[n("code",[t._v("0 <= K <= 10000")])]),t._v(" "),n("li",[t._v("如果 "),n("code",[t._v("A.length > 1")]),t._v("，那么 "),n("code",[t._v("A[0] != 0")])])]),t._v(" "),n("h4",{attrs:{id:"第一版-自己写的-时间和空间都一般"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-自己写的-时间和空间都一般"}},[t._v("#")]),t._v(" 第一版，自己写的,时间和空间都一般")]),t._v(" "),n("p",[t._v("执行用时 :180 ms, 在所有 cpp 提交中击败了54.11%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :13.7 MB, 在所有 cpp 提交中击败了39.51%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("vector<int> addToArrayForm(vector<int>& A, int K) { //52134\n\t\n\tvector<int> temp,res;\n\t\n\twhile (K != 0) {\n\n\t\ttemp.push_back(K % 10);\n\t\tK = K / 10;\n\t}\n\n\tint i = A.size() - 1,j=0;\n\tfor (; i>=0 && j<temp.size(); --i,++j) {\n\t\tres.push_back(temp[j] + A[i]);\t\n\t}\n\tif (j == temp.size() && i>=0) {\n\t\tfor (   ; i >= 0;--i) {\t\t \n\t\t\tres.push_back(A[i]);\n\t\t}\n\t}\n\telse if (i == -1 && j<temp.size())\n\t{\n\t\tfor ( ; j<temp.size(); ++j) {\n\t\t\tres.push_back(temp[j]);\n\t\t}\n\t}\n\n\tfor (i = 0; i < res.size(); ++i) {\n\t\tif (res[i] > 9) {\n\t\t\tres[i] = res[i] - 10;\n\t\t\tif (i != res.size() - 1) res[i + 1] = res[i + 1] + 1;\n\t\t\telse\n\t\t\t\tres.push_back(1);\n\n\t\t}\n\n\t}\n\n\treverse(res.begin(), res.end());\n\n\treturn res;\n}\n\n")])])]),n("h4",{attrs:{id:"第二版-反而越改越差"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二版-反而越改越差"}},[t._v("#")]),t._v(" 第二版，反而越改越差")]),t._v(" "),n("p",[t._v("执行用时 :204 ms, 在所有 cpp 提交中击败了47.70%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :13.8 MB, 在所有 cpp 提交中击败了39.51%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("  vector<int> addToArrayForm(vector<int>& A, int K) {\n   vector<int> temp;\t\n\twhile (K != 0) {\n\n\t\ttemp.push_back(K % 10);\n\t\tK = K / 10;\n\t}\n\n\tint i = A.size() - 1,j=0;\n\tfor (; i>=0 && j<temp.size(); --i,++j) {\n\t\ttemp[j]=temp[j] + A[i];\t\n\t}\n\n\n\n\tif (j == temp.size() && i>=0) {\n\t\tfor (   ; i >= 0;--i) {\t\t \n\t\t\ttemp.push_back(A[i]);\n\t\t}\n\t}\n\n\tfor (i = 0; i < temp.size(); ++i) {\n\t\tif (temp[i] > 9) {\n\t\t\ttemp[i] = temp[i] - 10;\n\t\t\tif (i != temp.size() - 1) temp[i + 1] = temp[i + 1] + 1;\n\t\t\telse\n\t\t\t\ttemp.push_back(1);\n\n\t\t}\n\n\t}\n\treverse(temp.begin(), temp.end());\n\n\treturn temp;\n    }\n")])])]),n("h4",{attrs:{id:"第三版-又改进了一下-快多了"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第三版-又改进了一下-快多了"}},[t._v("#")]),t._v(" 第三版，又改进了一下，快多了")]),t._v(" "),n("p",[t._v("执行用时 :136 ms, 在所有 cpp 提交中击败了95.79%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :12.3 MB, 在所有 cpp 提交中击败了92.20%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    vector<int> addToArrayForm(vector<int>& A, int K) {\n\tvector<int> temp;\t\n\twhile (K != 0) {\n\n\t\ttemp.push_back(K % 10);\n\t\tK = K / 10;\n\t}\n\n\treverse(A.begin(), A.end());\n\tsize_t i=0;\n\tfor ( ; i<A.size() && i<temp.size();++i) {\n\t\tA[i]=temp[i] + A[i];\n\t\tif (A[i] > 9 && i != A.size() - 1) {\n\t\t\tA[i] = A[i] - 10;\n\t\t\tA[i+ 1] = A[i + 1] + 1;\n\t\t} \n\t\telse if (A[i] > 9 && i == A.size() - 1) {\n\t\t\tA[i] = A[i] - 10;\n\t\t\tA.push_back(1);\n\t\t}\n\t}\n\n\n\tif (i == temp.size()) {\n\tfor (   ; i <A.size();++i) {\t\t \n\t\tif (A[i] > 9 && i != A.size() - 1) {\n\t\t\tA[i] = A[i] - 10;\n\t\t\tA[i + 1] = A[i + 1] + 1;\n\t\t}\n\t\tif ( A[i] > 9 && i== A.size() - 1) {\n\t\t\tA[i] = A[i] - 10;\n\t\t\tA.push_back(1);\n\t\t}\n\t\t}\n\t}\n\telse if (i == A.size())\n\t{\n\t\tfor (; i < temp.size(); ++i) {\n\t\t\tA.push_back(temp[i]);\n\t\t}\n\t}\n\treverse(A.begin(), A.end());\n\treturn A;\n    }\n")])])]),n("p",{attrs:{id:"复写零"}}),t._v(" "),n("h3",{attrs:{id:"_1089-复写零"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1089-复写零"}},[t._v("#")]),t._v(" 1089. 复写零")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/duplicate-zeros/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("给你一个长度固定的整数数组 arr，请你将该数组中出现的每个零都复写一遍，并将其余的元素向右平移。")]),t._v(" "),n("p",[t._v("注意：请不要在超过该数组长度的位置写入元素。")]),t._v(" "),n("p",[t._v("要求：请对输入的数组 就地 进行上述修改，不要从函数返回任何东西。")]),t._v(" "),n("p",[t._v("示例 1：")]),t._v(" "),n("p",[t._v("输入：[1,0,2,3,0,4,5,0]\n输出：null\n解释：调用函数后，输入的数组将被修改为：[1,0,0,2,3,0,0,4]\n示例 2：")]),t._v(" "),n("p",[t._v("输入：[1,2,3]\n输出：null\n解释：调用函数后，输入的数组将被修改为：[1,2,3]")]),t._v(" "),n("p",[t._v("提示：")]),t._v(" "),n("p",[t._v("1 <= arr.length <= 10000\n0 <= arr[i] <= 9")]),t._v(" "),n("h4",{attrs:{id:"第一步-比较耗时"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一步-比较耗时"}},[t._v("#")]),t._v(" 第一步 比较耗时")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("duplicateZeros")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop_back")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这步很关键")]),t._v("\n                i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("执行用时 :48 ms, 在所有 C++ 提交中击败了56.70%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :9.5 MB, 在所有 C++ 提交中击败了100.00%的用户")]),t._v(" "),n("h4",{attrs:{id:"第二种-借助栈-减少时间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二种-借助栈-减少时间"}},[t._v("#")]),t._v(" 第二种 借助栈，减少时间")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("duplicateZeros")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tstack"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" st"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" temp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("temp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("temp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tarr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("st"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("empty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tarr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push_back")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("st"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("执行用时 :28 ms, 在所有 C++ 提交中击败了90.69%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :9.5 MB, 在所有 C++ 提交中击败了100.00%的用户")]),t._v(" "),n("p",{attrs:{id:"等价多米诺骨牌对的数量"}}),t._v(" "),n("h3",{attrs:{id:"_1128-等价多米诺骨牌对的数量-好题-真的很好的题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1128-等价多米诺骨牌对的数量-好题-真的很好的题"}},[t._v("#")]),t._v(" 1128. 等价多米诺骨牌对的数量  好题，真的很好的题")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/number-of-equivalent-domino-pairs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("给你一个由一些多米诺骨牌组成的列表 "),n("code",[t._v("dominoes")]),t._v("。")]),t._v(" "),n("p",[t._v("如果其中某一张多米诺骨牌可以通过旋转 "),n("code",[t._v("0")]),t._v(" 度或 "),n("code",[t._v("180")]),t._v(" 度得到另一张多米诺骨牌，我们就认为这两张牌是等价的。")]),t._v(" "),n("p",[t._v("形式上，"),n("code",[t._v("dominoes[i] = [a, b]")]),t._v(" 和 "),n("code",[t._v("dominoes[j] = [c, d]")]),t._v(" 等价的前提是 "),n("code",[t._v("a==c")]),t._v(" 且 "),n("code",[t._v("b==d")]),t._v("，或是 "),n("code",[t._v("a==d")]),t._v(" 且 "),n("code",[t._v("b==c")]),t._v("。")]),t._v(" "),n("p",[t._v("在 "),n("code",[t._v("0 <= i < j < dominoes.length")]),t._v(" 的前提下，找出满足 "),n("code",[t._v("dominoes[i]")]),t._v(" 和 "),n("code",[t._v("dominoes[j]")]),t._v(" 等价的骨牌对 "),n("code",[t._v("(i, j)")]),t._v(" 的数量。")]),t._v(" "),n("p",[n("strong",[t._v("示例：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：dominoes = [[1,2],[2,1],[3,4],[5,6]]\n输出：1\n")])])]),n("p",[n("strong",[t._v("提示：")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("1 <= dominoes.length <= 40000")])]),t._v(" "),n("li",[n("code",[t._v("1 <= dominoes[i][j] <= 9")])])]),t._v(" "),n("h4",{attrs:{id:"第一版-直接遍历-超出时间限制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-直接遍历-超出时间限制"}},[t._v("#")]),t._v(" 第一版，直接遍历，超出时间限制")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    int numEquivDominoPairs(vector<vector<int>>& dominoes) {\n    int cut = 0;\n\tfor (int i = 0; i < dominoes.size(); ++i) {\n\t\tfor (int j = i + 1; j < dominoes.size(); ++j) {\n\t\t\tif ((dominoes[i][0] == dominoes[j][0] && dominoes[i][1] == dominoes[j][1]) || (dominoes[i][0] == dominoes[j][1] && dominoes[i][1] == dominoes[j][0]))\n\t\t\t\tcut++;\n\t\t}\n\t}\n\n\treturn cut;\n        \n    }\n")])])]),n("h4",{attrs:{id:"第二版-自己定义unordered-map的键值-为其他类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二版-自己定义unordered-map的键值-为其他类型"}},[t._v("#")]),t._v(" 第二版，自己定义unordered_map的键值，为其他类型")]),t._v(" "),n("p",[t._v("执行用时 :52 ms, 在所有 cpp 提交中击败了87.56%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :21 MB, 在所有 cpp 提交中击败了100.00%的用户")]),t._v(" "),n("p",[t._v("实例：https://blog.csdn.net/zhangpiu/article/details/49837387?utm_source=blogxgwz9")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("struct KEY\n{\n\tint minNum;\n\tint maxNum;\n\n\tKEY(int f, int s) : minNum(f), maxNum(s) {}\n};\n\nstruct HashFunc\n{\n\tstd::size_t operator()(const KEY& key) const\n\t{\n\t\tusing std::size_t;\n\t\tusing std::hash;\n\n\t\treturn ((hash<int>()(key.minNum)\n\t\t\t^ (hash<int>()(key.maxNum) << 1)) >> 1);\n\t}\n};\n\nstruct EqualKey\n{\n\tbool operator () (const KEY& lhs, const KEY& rhs) const\n\t{\n\t\treturn lhs.minNum == rhs.minNum\n\t\t\t&& lhs.maxNum == rhs.maxNum;\n\t}\n};\n\nint numEquivDominoPairs(vector<vector<int>>& dominoes) {\n\n\tunordered_map<KEY,int,HashFunc,EqualKey> unmp;\n\n\tint cut = 0;\n\tint maxNum=0, minNum=0;\n\tfor (auto &n:dominoes) {\n\t\tminNum = min(n[0], n[1]);\n\t\tmaxNum = max(n[0], n[1]);\n\n\t\tif (unmp.find({ minNum,maxNum }) != unmp.end()) {\n\t\t\tcut += unmp[{ minNum, maxNum }];\n\t\t\tunmp[{minNum, maxNum}]++;\n\t\t}\n\t\telse\n\t\t\tunmp[{minNum,maxNum}]++;\n\t}\n\n\treturn cut;\n}\n")])])]),n("h4",{attrs:{id:"第三版-参考别人的-会更快一点了"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第三版-参考别人的-会更快一点了"}},[t._v("#")]),t._v(" 第三版，参考别人的，会更快一点了")]),t._v(" "),n("p",[t._v("执行用时 :48 ms, 在所有 cpp 提交中击败了95.27%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :21.1 MB, 在所有 cpp 提交中击败了100.00%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\nint numEquivDominoPairs(vector<vector<int>>& dominoes) {\n\tunordered_map<int, int> ret;\n\tint cut = 0,minNum=0,maxNum=0;\n\n\tfor (auto& a : dominoes) {\n\t\tmaxNum = max(a[0], a[1]);\n\t\tminNum = min(a[0], a[1]);\n\t\tif (ret.find(minNum * 10 + maxNum) != ret.end()) {\n\t\t\tcut += ret[minNum * 10 + maxNum];\n\t\t}\n\t\tret[minNum * 10 + maxNum] += 1;\n\n\t}\n\n\treturn cut;\n}\n")])])]),n("h4",{attrs:{id:"第四版-别人的写法-化为数学公式来做的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第四版-别人的写法-化为数学公式来做的"}},[t._v("#")]),t._v(" 第四版，别人的写法，化为数学公式来做的")]),t._v(" "),n("p",[t._v("执行用时 :44 ms, 在所有 cpp 提交中击败了97.76%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :21.1 MB, 在所有 cpp 提交中击败了100.00%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int numEquivDominoPairs(vector<vector<int>>& dominoes) {\n        map<int, int> ret;\n        int count = 0;\n        \n        for(int i  = 0; i < dominoes.size(); ++i)\n        {\n            int k = 0;\n            int m = dominoes[i][0];\n            int n = dominoes[i][1];\n            (m > n) ? k = n * 10 + m : k = m * 10 + n;//这种表达式也是可以的\n            ret[k] += 1;\n        }\n        \n        for(auto iter = ret.begin(); iter != ret.end(); ++iter)\n        {\n            count += iter->second * (iter->second - 1) / 2;\n        }\n\n        return count;\n    }\n")])])]),n("h4",{attrs:{id:"第五版-结合一下-最快的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第五版-结合一下-最快的"}},[t._v("#")]),t._v(" 第五版，结合一下，最快的")]),t._v(" "),n("p",[t._v("执行用时 :40 ms, 在所有 cpp 提交中击败了99.00%的用户")]),t._v(" "),n("p",[t._v("内存消耗 :21 MB, 在所有 cpp 提交中击败了100.00%的用户")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int numEquivDominoPairs(vector<vector<int>>& dominoes) {\n\n\tunordered_map<int, int> ret;\n\tint k = 0, m = 0, n = 0;\n\tfor (int i = 0; i < dominoes.size(); ++i)\n\t{\n\t\tm = dominoes[i][0];\n\t\tn = dominoes[i][1];\n\t\t(m > n) ? k = n * 10 + m : k = m * 10 + n;//这种表达式也是可以的\n\t\tret[k] += 1;\n\t}\n\tint count = 0;\n\tfor (auto &iter:ret)\n\t{\n\t\tcount += iter.second * (iter.second - 1) / 2;\n\t}\n\n\treturn count;\n}\n")])])]),n("p",[n("img",{attrs:{src:"https://assets.leetcode-cn.com/aliyun-lc-upload/users/forthespada/avatar_1568598096.png",alt:"img"}})])])}),[],!1,null,null,null);s.default=e.exports}}]);