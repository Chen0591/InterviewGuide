(window.webpackJsonp=window.webpackJsonp||[]).push([[366],{779:function(t,a,s){"use strict";s.r(a);var n=s(62),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",{attrs:{id:"盛最多水的容器"}}),t._v(" "),s("h4",{attrs:{id:"_11-盛最多水的容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-盛最多水的容器"}},[t._v("#")]),t._v(" 11. 盛最多水的容器")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/container-with-most-water/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("给定 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。")]),t._v(" "),s("p",[t._v("说明：你不能倾斜容器，且 n 的值至少为 2。")]),t._v(" "),s("p",[t._v("图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。")]),t._v(" "),s("p",[t._v("示例:")]),t._v(" "),s("p",[t._v("输入: [1,8,6,2,5,4,8,3,7]\n输出: 49")]),t._v(" "),s("h5",{attrs:{id:"第一版-速度太慢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一版-速度太慢"}},[t._v("#")]),t._v(" 第一版，速度太慢")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    int maxArea(vector<int>& height) {\n    int len=height.size();\n\tint mostWater = 0;\n\tfor (int i = 0,row,col; i < len; ++i)\n\t{\n\t\tfor (int j = i+1; j < len; ++j) \n\t\t{\n\t\t\trow = j - i;\n\t\t\tcol = min(height[i], height[j]);\n\t\t\tmostWater = row * col > mostWater ? row * col : mostWater;\n\t\t}\n\t}\n\treturn mostWater;  \n    }\n")])])]),s("p",[t._v("执行用时 :1640 ms, 在所有 C++ 提交中击败了9.51%的用户")]),t._v(" "),s("p",[t._v("内存消耗 :9.9 MB, 在所有 C++ 提交中击败了65.57%的用户")]),t._v(" "),s("h5",{attrs:{id:"第二版-双指针-很快"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二版-双指针-很快"}},[t._v("#")]),t._v(" 第二版 双指针，很快")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    int maxArea(vector<int>& height) {\n\tint high=height.size()-1,low=0;\n\tint mostWater = 0,temp;\n\twhile (low < high)\n\t{\n\t\ttemp = (high - low) * min(height[low], height[high]);\n\t\tmostWater = mostWater > temp ? mostWater : temp;\n\t\tif (height[low] <= height[high]) low++;\n\t\telse high--;\n\t}\n\treturn mostWater;\n    }\n")])])]),s("p",[t._v("执行用时 :16 ms, 在所有 C++ 提交中击败了97.32%的用户")]),t._v(" "),s("p",[t._v("内存消耗 :9.8 MB, 在所有 C++ 提交中击败了74.86%的用户")]),t._v(" "),s("h5",{attrs:{id:"官方题解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#官方题解"}},[t._v("#")]),t._v(" 官方题解：")]),t._v(" "),s("p",[t._v("https://leetcode-cn.com/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode/")]),t._v(" "),s("p",[s("strong",[t._v("最初我们考虑由最外围两条线段构成的区域。现在，为了使面积最大化，我们需要考虑更长的两条线段之间的区域。如果我们试图将指向较长线段的指针向内侧移动，矩形区域的面积将受限于较短的线段而不会获得任何增加。但是，在同样的条件下，移动指向较短线段的指针尽管造成了矩形宽度的减小，但却可能会有助于面积的增大。因为移动较短线段的指针会得到一条相对较长的线段，这可以克服由宽度减小而引起的面积减小。")])]),t._v(" "),s("h5",{attrs:{id:"比较经典的介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比较经典的介绍"}},[t._v("#")]),t._v(" 比较经典的介绍")]),t._v(" "),s("p",[t._v("思路：\n算法流程： 设置双指针 ii,jj 分别位于容器壁两端，根据规则移动指针（后续说明），并且更新面积最大值 res，直到 i == j 时返回 res。")]),t._v(" "),s("p",[t._v("指针移动规则与证明： 每次选定围成水槽两板高度 h[i]h[i],h[j]h[j] 中的短板，向中间收窄 11 格。以下证明：")]),t._v(" "),s("p",[t._v("设每一状态下水槽面积为 S(i, j)S(i,j),(0 <= i < j < n)(0<=i<j<n)，由于水槽的实际高度由两板中的短板决定，则可得面积公式 S(i, j) = min(h[i], h[j]) × (j - i)S(i,j)=min(h[i],h[j])×(j−i)。\n在每一个状态下，无论长板或短板收窄 11 格，都会导致水槽 底边宽度 -1−1：\n若向内移动短板，水槽的短板 min(h[i], h[j])min(h[i],h[j]) 可能变大，因此水槽面积 S(i, j)S(i,j) 可能增大。\n若向内移动长板，水槽的短板 min(h[i], h[j])min(h[i],h[j]) 不变或变小，下个水槽的面积一定小于当前水槽面积。\n因此，向内收窄短板可以获取面积最大值。换个角度理解：\n若不指定移动规则，所有移动出现的 S(i, j)S(i,j) 的状态数为 C(n, 2)C(n,2)，即暴力枚举出所有状态。\n在状态 S(i, j)S(i,j) 下向内移动短板至 S(i + 1, j)S(i+1,j)（假设 h[i] < h[j]h[i]<h[j] ），则相当于消去了 {S(i, j - 1), S(i, j - 2), ... , S(i, i + 1)}S(i,j−1),S(i,j−2),...,S(i,i+1) 状态集合。而所有消去状态的面积一定 <= S(i, j)<=S(i,j)：\n短板高度：相比 S(i, j)S(i,j) 相同或更短（<= h[i]<=h[i]）；\n底边宽度：相比 S(i, j)S(i,j) 更短。\n因此所有消去的状态的面积都 < S(i, j)<S(i,j)。通俗的讲，我们每次向内移动短板，所有的消去状态都不会导致丢失面积最大值 。\n复杂度分析：")]),t._v(" "),s("p",[t._v("时间复杂度 O(N)O(N)，双指针遍历一次底边宽度 NN 。\n空间复杂度 O(1)O(1)，指针使用常数额外空间。")]),t._v(" "),s("p",{attrs:{id:"检查数组对是否可以被整除"}}),t._v(" "),s("h4",{attrs:{id:"_1497-检查数组对是否可以被-k-整除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1497-检查数组对是否可以被-k-整除"}},[t._v("#")]),t._v(" 1497. 检查数组对是否可以被 k 整除")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/check-if-array-pairs-are-divisible-by-k/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("给你一个整数数组 "),s("code",[t._v("arr")]),t._v(" 和一个整数 "),s("code",[t._v("k")]),t._v(" ，其中数组长度是偶数，值为 "),s("code",[t._v("n")]),t._v(" 。")]),t._v(" "),s("p",[t._v("现在需要把数组恰好分成 "),s("code",[t._v("n / 2")]),t._v(" 对，以使每对数字的和都能够被 "),s("code",[t._v("k")]),t._v(" 整除。")]),t._v(" "),s("p",[t._v("如果存在这样的分法，请返回 "),s("em",[t._v("True")]),t._v(" ；否则，返回 "),s("em",[t._v("False")]),t._v(" 。")]),t._v(" "),s("p",[s("strong",[t._v("示例 1：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入：arr = [1,2,3,4,5,10,6,7,8,9], k = 5\n输出：true\n解释：划分后的数字对为 (1,9),(2,8),(3,7),(4,6) 以及 (5,10) 。\n")])])]),s("p",[s("strong",[t._v("示例 2：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入：arr = [1,2,3,4,5,6], k = 7\n输出：true\n解释：划分后的数字对为 (1,6),(2,5) 以及 (3,4) 。\n")])])]),s("p",[s("strong",[t._v("示例 3：")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("输入：arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n输出："),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n解释：无法在将数组中的数字分为三对的同时满足每对数字和能够被 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" 整除的条件。\n")])])]),s("p",[s("strong",[t._v("示例 4：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入：arr = [-10,10], k = 2\n输出：true\n")])])]),s("p",[s("strong",[t._v("示例 5：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入：arr = [-1,1,-2,2,-3,3,-4,4], k = 3\n输出：true\n")])])]),s("p",[s("strong",[t._v("提示：")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("arr.length == n")])]),t._v(" "),s("li",[s("code",[t._v("1 <= n <= 10^5")])]),t._v(" "),s("li",[s("code",[t._v("n")]),t._v(" 为偶数")]),t._v(" "),s("li",[s("code",[t._v("-10^9 <= arr[i] <= 10^9")])]),t._v(" "),s("li",[s("code",[t._v("1 <= k <= 10^5")])])]),t._v(" "),s("h5",{attrs:{id:"_1-贪心-取余做法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-贪心-取余做法"}},[t._v("#")]),t._v(" 1，贪心 + 取余做法")]),t._v(" "),s("p",[t._v("思路:错误想法,找到两个之和整除,这样可能找不全\n正确思路:对数组每个数求余,负数就得+k,然后统计每个余数的数量\n从0到k-1, 1的数量要和k-1的数量相同才能,2和k-2等等\n0的数量要是2的倍数")]),t._v(" "),s("p",[t._v("执行用时：264 ms, 在所有 C++ 提交中击败了84.21%的用户")]),t._v(" "),s("p",[t._v("内存消耗：61.5 MB, 在所有 C++ 提交中击败了100.00%的用户")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("canArrange")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("res")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可能会有负数，因此要加上 k")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//为0的必须是 2的倍数，比如 0 + 7 或者 7 + 14 这样的")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);